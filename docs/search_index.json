[
["index.html", "Opioid Environment Toolkit Introduction Software Basics Author Team", " Opioid Environment Toolkit Created by : Center for Spatial Data Science `Last Updated : 2020-10-06 Introduction This toolkit provides an introduction to GIS and spatial analysis for opioid environment applications that will allow practitioners to support their communities with better data analytics and visualization services. We introduce basic spatial analytic functionalities using open source tools, mainly in R, using applied examples for visualizing, mapping, and understanding the opioid risk environment. This toolkit was developed for the JCOIN network by the team at the Center for Spatial Data Science at the University of Chicago. Software Basics We assume a basic knowledge of R and coding languages for these toolkits. However, beginners can check out these resources for access to the basics. For most of the tutorials in this toolkit, you’ll need to have R and RStudio downloaded and installed on your system. You should be able to install packages, and have very basic familiarity with R following intro-level tutorials provided through installation guides. You can also refer to this R for Social Scientists tutorial developed by Data Carpentry for a refresher. You should also know how to find the address to a folder on your computer system. We will work with following libraries, so please be sure to install: sf tmap tidyverse tidycensus Note: You may find another library called sp if you google search spatial analysis in R. Note that sp and sf are two different packages. If you need to work between these two R spatial ecosystems, see this guide for a translation of sp to sf commands. Author Team The tutorials in this toolkit were co-authored by Marynia Kolak, Moksha Menghaney, Qinyun Lin, and Angela Li at the Center for Spatial Data Science at the University of Chicago. Our group is a part of the Policy and Practice Observational and Survey Research Core of the (JCOIN network)[https://heal.nih.gov/research/research-to-practice/jcoin], within the Methodology and Adsvanced Analytic Resource Center (MAARC). "],
["spatial-data-introduction.html", "1 Spatial Data Introduction 1.1 Defining spatial data 1.2 Spatial data formats 1.3 Spatial data types 1.4 Coordiante Reference System Contributors and Further Resources", " 1 Spatial Data Introduction 1.1 Defining spatial data Spatial data refers to data that contain information about specific locations, and the information content of the data may change with location. In other words, “information” and “location” are two important elements in spatial data. In some occassions, spatial data may only include “location.” But without “location,” the data is no longer spatial anymore. For example, a spatial data that describes the resource distribution of Medications for Opioid Overuse Disorder (MOUDs) must contain location information of these MOUD resources, otherwise the data becomes a non-spatial list of those resources. For the purpose of this tutorial, we will only briefly introduce some important concept in spatial data. See Further Resources if you would like to learn more about these concepts. 1.2 Spatial data formats Define how this is different from a CSV… Explain how sf is a spatial data format within R ecosystem… The most common spatial data format is the shapefile, from ESRI/ArcGIS proprietary software… The shapefile format consists of a collection of files with a common prefix, stored in the same directory. Three mandary files have filename extensions .shp, .shx, and .dbf. In many scenarios, these files are compressed into one file (such as .zip and .tar.gz). There are other formats as well like geojson, KML, etc but we focus on sf (within R) and shapefile (as file format) here. 1.3 Spatial data types Two common formats of spatial data are vector and raster data. For the purpose of this tutorial, we will focus on vector data that represents the world surface using points, lines, and polygons. Connecting points can generate lines, and connecting lines that crate an enclosed area can generate polygons. Include a picture of point, line, polygon… Link to more resources… 1.4 Coordiante Reference System As noted before, the most fundamental element of a spatial data is “location.” Coordinate reference system (CRS) tells your mapping software (such as R) what method should be used to flatten or project the Earth’s surface onto a 2-dimensional map. Because different CRS implies different ways of projections and generates substantially different visualizations, it is important to make sure the CRS accompanied with each spatial data are the same before implementing any spatial joining practices. Add some pretty pictures for reference… In sf, you can use the function st_crs to check the CRS used in one data, and the function st_transform to project the data to a particular CRS. See this Interactive Tutorial that demonstrates these functions. The CRS concept can be tricky to comprehend and utilize in practice, so we come back to this several times in our tutorials… Contributors and Further Resources Further resources See Chapter 2 Geographic data in R in Geocomputation with R for more info about Vector data, Raster data, and Coordiante Reference Systems. See this Software Carpentry workshop for more explanations to better understand coordinate reference systems. See this Interactive Tutorial that uses sf package to project spatial data in R. "],
["geocodingAddress-tutorial.html", "2 Geocoding Resource Locations 2.1 Overview 2.2 Environment Setup 2.3 Geocode addresses 2.4 Convert to Spatial Data", " 2 Geocoding Resource Locations 2.1 Overview A common goal in opioid environment research is to calculate and compare access metrics to different providers of Medications for Opioid Overuse Disorder (MOUDs). Before we can run any analytics on the resource location data, we need to convert resource addresses to spatial data points, which can be then used to calculate access metrics. Geocoding is the process of converting addresses (like a street address) into geographic coordinates using a known coordinate reference system. We can then use these coordinates (latitude, longitude) to spatially enable our data. This means we convert to a spatial data frame (sf) within R for spatial analysis within our R session, and then save as a shapefile (a spatial data format) for future use. In this tutorial we demonstrate how to geocode resource location addresses and convert to spatial data points that can be used for future mapping and geospatial analysis. Our objectives are thus to: Geocode addresses to get geographic coordinates Visualize the resource locations as points on a map in R Transform a flat file (.CSV) to a spatially enabled shapefile (.SHP) 2.2 Environment Setup To replicate the code &amp; functions illustrated in this tutorial, you’ll need to have R and RStudio downloaded and installed on your system. This tutorial assumes some familiarity with the R programming language. 2.2.0.1 Packages used We will use the following packages in this tutorial: sf: to manipulate spatial data tmap: to visualize and create maps tidygeocoder: to convert addresses to geographic coordinates 2.2.0.2 Input/Output Our inputs will be a CSV file that include addresses of our resources (“chicago_methadone.csv”). To access the test dataset for this tutorial, please download here. We will convert these addresses to geographic coordinates using an appropriate coordinate reference system (CRS), and then spatially enable the data for mapping. We will then export the spatial dataframe as a shapefile. 2.2.1 Install and load the packages First, let’s install the relevant R packages: install.packages(&quot;sf&quot;) install.packages(&quot;tmap&quot;) install.packages(&quot;tidygeocoder&quot;) Then load the libraries for use. Note: The messages you see about GEOS, GDAL, and PROJ refer to software libraries that allow you to work with spatial data. library(sf) library(tidygeocoder) library(tmap) 2.2.2 Read in CSV File We will use a CSV that includes methadone clinic addresses in Chicago as an example. We start with a small dataset to test our geocoding workflow, as best practice. Let’s take a look at the first few rows of the dataset. Our data includes addresses but not geographic coordinates. methadoneClinics &lt;- read.csv(&quot;data/chicago_methadone_nogeometry.csv&quot;) head(methadoneClinics) ## X Name Address City State Zip ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 ## 2 2 Sundace Methadone Treatment Center, LLC 4545 North Broadway St. Chicago IL 60640 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 ## 4 4 PDSSC - Chicago, Inc. 2260 N. Elston Ave. Chicago IL 60614 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 ## 6 6 Family Guidance Centers, Inc. 310 W. Chicago Ave. Chicago IL 60654 2.3 Geocode addresses 2.3.1 Quality Control Before geocoding, perform an initial quality check on the data. Note that the address, city, state, and zip code are all separated as different columns. This will make it easier to stitch together for a coherent, standard address for geocoding. Furthermore, there do not appear to be any major errors. The city name “Chicago” is spelled consistently, without missing addresses or zip codes. This will not always be the case, unfortunately. Data must be cleaned prior to loading into a geocoding service. 2.3.2 Selecting Geocoding Service To get a geographic coordinate for each site, we’ll need to geocode. There are a number of geocoding options in R; here we use we the tidygeocoder package. It uses mutliple geocoding services, providing the user with an option to choose. It also provides the option to use a cascade method which queries other geocoding services incase the default method fails to provide coordinates. When considering which geocoding service to use, consider scale and potential geocoding errors. Some geocoding services are more accurate than others, so if your coordinates were not coded precisely, try a different service. If you have thousands of addresses to geocode, you may require more complex data pipelines. The default method used here is via US Census geocoder, which allows around 10,000 addresses to be geocoded at once. Others have varying daily limits. The Google Maps API and ESRI Geocoding service are additional high-quality geocoding services with varying cost associated. 2.3.3 Test Geocoding Service Before geocoding your entire dataset, first review the documentation for the geocoding service you’ll be using. In our example we use tidygeocoder, with documentation found here. Let’s test the service by starting with one address: sample &lt;- geo(&quot;4545 North Broadway St. Chicago, IL&quot;, lat = latitude, long = longitude, method = &#39;cascade&#39;) sample ## # A tibble: 1 x 4 ## address latitude longitude geo_method ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 4545 North Broadway St. Chicago, IL 42.0 -87.7 census What did the output look like? Get familiar with the input parameters, expected output, and review the documentation further if needed. 2.3.4 Prepare input parameter To apply the function to multiple addresses, we first we need ensure that we have a character vector of full addresses. str(methadoneClinics) ## &#39;data.frame&#39;: 27 obs. of 6 variables: ## $ X : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Name : Factor w/ 25 levels &quot;*&quot;,&quot;A Rincon Family Services&quot;,..: 5 25 23 21 3 8 2 1 14 24 ... ## $ Address: Factor w/ 27 levels &quot;110 E. 79th St.&quot;,..: 20 21 17 6 23 10 16 3 5 8 ... ## $ City : Factor w/ 1 level &quot;Chicago&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ State : Factor w/ 1 level &quot;IL&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ Zip : int 60640 60640 60613 60614 60654 60654 60651 60607 60607 60616 ... Next we convert all fields to character first to avoid issues with factors (a common peril of R!). methadoneClinics$fullAdd &lt;- paste(as.character(methadoneClinics$Address), as.character(methadoneClinics$City), as.character(methadoneClinics$State), as.character(methadoneClinics$Zip)) head(methadoneClinics) ## X Name Address City State Zip ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 ## 2 2 Sundace Methadone Treatment Center, LLC 4545 North Broadway St. Chicago IL 60640 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 ## 4 4 PDSSC - Chicago, Inc. 2260 N. Elston Ave. Chicago IL 60614 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 ## 6 6 Family Guidance Centers, Inc. 310 W. Chicago Ave. Chicago IL 60654 ## fullAdd ## 1 4453 North Broadway st. Chicago IL 60640 ## 2 4545 North Broadway St. Chicago IL 60640 ## 3 3934 N. Lincoln Ave. Chicago IL 60613 ## 4 2260 N. Elston Ave. Chicago IL 60614 ## 5 609 N. Wells St. Chicago IL 60654 ## 6 310 W. Chicago Ave. Chicago IL 60654 2.3.5 Batch Geocoding Now we are ready to geocode the addresses. The “tibble” data structure below shows us the address, latitude, longitude and also the geocoding service used to get the coordinates. Note that geocoding takes a bit of time, so patience is required. geoCodedClinics &lt;- methadoneClinics %&gt;% geocode(methadoneClinics, address = &#39;fullAdd&#39;, lat = latitude, long = longitude, method = &#39;cascade&#39;) geoCodedClinics ## # A tibble: 27 x 10 ## X Name Address City State Zip fullAdd latitude longitude geo_method ## &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 &quot;Chicago Treatment and Couns… 4453 North Br… Chica… IL 60640 4453 North Broadway… NA NA osm ## 2 2 &quot;Sundace Methadone Treatment… 4545 North Br… Chica… IL 60640 4545 North Broadway… NA NA osm ## 3 3 &quot;Soft Landing Interventions/… 3934 N. Linco… Chica… IL 60613 3934 N. Lincoln Ave… 42.0 -87.7 census ## 4 4 &quot;PDSSC - Chicago, Inc.&quot; 2260 N. Elsto… Chica… IL 60614 2260 N. Elston Ave.… 41.9 -87.7 census ## 5 5 &quot;Center for Addictive Proble… 609 N. Wells … Chica… IL 60654 609 N. Wells St. Ch… 41.9 -87.6 census ## 6 6 &quot;Family Guidance Centers, In… 310 W. Chicag… Chica… IL 60654 310 W. Chicago Ave.… 41.9 -87.6 census ## 7 7 &quot;A Rincon Family Services&quot; 3809 W. Grand… Chica… IL 60651 3809 W. Grand Ave. … 41.9 -87.7 census ## 8 8 &quot;*&quot; 140 N. Ashlan… Chica… IL 60607 140 N. Ashland Ave.… 41.9 -87.7 osm ## 9 9 &quot;Healthcare Alternative Syst… 210 N. Ashlan… Chica… IL 60607 210 N. Ashland Ave.… 41.9 -87.7 census ## 10 10 &quot;Specialized Assistance Serv… 2630 S. Wabas… Chica… IL 60616 2630 S. Wabash Ave.… 41.8 -87.6 census ## # … with 17 more rows The code worked for all addresses except the first two. We already resolved the 4545 North Broadway St.address above but here in the dataframe we get NAs. It is pointing to some issue with the string input. These were missed in the previous quality check, but give us a clue to the types of errors we could see if geocoding more addresses. Unfortunately, such quirks are common across geocoding services in R and we just have to handle them. We manually update the full address strings to get apprpriate coordinates. methadoneClinics[1,&#39;fullAdd&#39;] &lt;- &#39;4453 North Broadway St.,Chicago IL 60640&#39; methadoneClinics[2,&#39;fullAdd&#39;] &lt;- &#39;4545 North Broadway St.,Chicago IL 60640&#39; Now we can geocode the full suite of addresses with success: geoCodedClinics &lt;- methadoneClinics %&gt;% geocode(methadoneClinics, address = &#39;fullAdd&#39;, lat = latitude, long = longitude, method = &#39;cascade&#39;) geoCodedClinics ## # A tibble: 27 x 10 ## X Name Address City State Zip fullAdd latitude longitude geo_method ## &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 &quot;Chicago Treatment and Couns… 4453 North Br… Chica… IL 60640 4453 North Broadway… 42.0 -87.7 osm ## 2 2 &quot;Sundace Methadone Treatment… 4545 North Br… Chica… IL 60640 4545 North Broadway… 42.0 -87.7 osm ## 3 3 &quot;Soft Landing Interventions/… 3934 N. Linco… Chica… IL 60613 3934 N. Lincoln Ave… 42.0 -87.7 census ## 4 4 &quot;PDSSC - Chicago, Inc.&quot; 2260 N. Elsto… Chica… IL 60614 2260 N. Elston Ave.… 41.9 -87.7 census ## 5 5 &quot;Center for Addictive Proble… 609 N. Wells … Chica… IL 60654 609 N. Wells St. Ch… 41.9 -87.6 census ## 6 6 &quot;Family Guidance Centers, In… 310 W. Chicag… Chica… IL 60654 310 W. Chicago Ave.… 41.9 -87.6 census ## 7 7 &quot;A Rincon Family Services&quot; 3809 W. Grand… Chica… IL 60651 3809 W. Grand Ave. … 41.9 -87.7 census ## 8 8 &quot;*&quot; 140 N. Ashlan… Chica… IL 60607 140 N. Ashland Ave.… 41.9 -87.7 osm ## 9 9 &quot;Healthcare Alternative Syst… 210 N. Ashlan… Chica… IL 60607 210 N. Ashland Ave.… 41.9 -87.7 census ## 10 10 &quot;Specialized Assistance Serv… 2630 S. Wabas… Chica… IL 60616 2630 S. Wabash Ave.… 41.8 -87.6 census ## # … with 17 more rows 2.4 Convert to Spatial Data While we have geographic coordinates loaded in our data, it is still not spatially enabled. To convert to a spatial data format, we have to enable to coordinate reference system that connects the latitude and longitude recorded to actual points on Earth. 2.4.1 Spatial Reference Systems There are thousands of ways to model the Earth, and each requires a different spatial reference system. This is a very complicated domain of spatial applications (for a primer see here), but for our purposes, we simplify by using a geodetic CRS that uses coordinates longitude and latitude. Not all coordinates will appear as a latitude/longitude, however, so it’s important to at least check for the CRS used when working with geographic data. The lat/long coordinates provided by the geocoding service we used report data using the CRS coded as 4326, a World Geodetic System (WGS84) model also used by Google Earth and many other applications. In this system, distance is measured as degrees and distorted. So while useful for visualizing points, we will need to convert to another CRS for other types of spatial analysis. 2.4.2 Enable Points Next we convert our dataframe to a spatial data frame using the st_as_sf() function. The coords argument specifies which two columns are the X and Y for your data. We set the crs argument equal to 4326. Please note longitude is entered as first column rather than the latitude. It is a very common mistake. The X, Y field actually refers to longitude, latitude. methadoneSf &lt;- st_as_sf(geoCodedClinics, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) head(data.frame(methadoneSf)) ## X Name Address City State Zip ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 ## 2 2 Sundace Methadone Treatment Center, LLC 4545 North Broadway St. Chicago IL 60640 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 ## 4 4 PDSSC - Chicago, Inc. 2260 N. Elston Ave. Chicago IL 60614 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 ## 6 6 Family Guidance Centers, Inc. 310 W. Chicago Ave. Chicago IL 60654 ## fullAdd geo_method geometry ## 1 4453 North Broadway St.,Chicago IL 60640 osm POINT (-87.65566 41.96321) ## 2 4545 North Broadway St.,Chicago IL 60640 osm POINT (-87.65694 41.96475) ## 3 3934 N. Lincoln Ave. Chicago IL 60613 census POINT (-87.67818 41.95331) ## 4 2260 N. Elston Ave. Chicago IL 60614 census POINT (-87.67407 41.92269) ## 5 609 N. Wells St. Chicago IL 60654 census POINT (-87.63409 41.89268) ## 6 310 W. Chicago Ave. Chicago IL 60654 census POINT (-87.63636 41.89657) Note that this is a data frame, but that it has a final column called “geometry” that stores the spatial information. 2.4.3 Visualize Points We can now plot the location of the methadone clinics with base R. This is a recommended step to confirm that you translated your coordinates correctly. A common mistake is switching the lat/long values, so your points could plot across the globe. If that happens, repeat the step above with flipped long/lat values. First we switch the tmap mode to view so we can look at the points with a live basemap layer. tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing Next, we plot our points as dots, and add the basemap. tm_shape(methadoneSf) + tm_dots() + tm_basemap(&quot;OpenStreetMap&quot;) ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. 2.4.4 Convert to Shapefile Finally, we save this spatial dataframe as a shapefile which can be used for further spatial analysis. write_sf(methadoneSf, &quot;methadoneClinics.shp&quot;) "],
["buffer_analysis.html", "3 Buffer Analysis 3.1 Overview 3.2 Environment Setup 3.3 Simple Overlay Map 3.4 Spatial Transformation 3.5 Generate Buffers", " 3 Buffer Analysis 3.1 Overview Once we have spatially referenced resource locations, it’s helpful to plot the data in the community of interest for some preliminary analysis. In this tutorial we will plot Methadone Providers in Chicago and community areas to provide some context. We will also generate a simple 2-mile buffer around each provider as an approximate “service area” to highlight neighborhoods with more, and fewer, resources. In order to accomplish this task, we will need to standardize our spatial data (clinic points, and community areas) with an appropriate coordinate reference system. Finally, we’ll make some maps! Our objectives are thus to: Overlay clinical providers (points) and community areas (polygons) Use a spatial transform operation to change coordinate reference systems Conduct a simple buffer analysis 3.2 Environment Setup To replicate the code &amp; functions illustrated in this tutorial, you’ll need to have R and RStudio downloaded and installed on your system. This tutorial assumes some familiarity with the R programming language. 3.2.1 Load Libraries We will use the following packages in this tutorial: sf: to manipulate spatial data tmap: to visualize and create maps First, load the required libraries. library(sf) library(tmap) 3.2.2 Load Data We will use the shapefile of spatially enabled resource data, methadoneClinics.shp, generated from our previous tutorial. A copy of the shapefile can also be found here, but note that all four files are required (.dbf, .prj, .shp, and .shx) to consitute a shapefile. As a reminder, this shapefile includes methadone clinics in Chicago as our working example. If you don’t have a shapefile of your data, but already have geographic coordinates as two columns in your CSV file, you can still use this tutorial. A reminder of how to transform your CSV with coordinates into a spatial data frame in R can be found here. First, load in the MOUD resources shapefile. Let’s take a look at the first few rows of the dataset. MetClinics &lt;- st_read(&quot;methadoneClinics.shp&quot;) ## Reading layer `methadoneClinics&#39; from data source `/Users/maryniakolak/code/opioid-environment-toolkit/methadoneClinics.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 27 features and 8 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -87.7349 ymin: 41.68698 xmax: -87.57673 ymax: 41.96475 ## CRS: 4326 head(MetClinics) ## Simple feature collection with 6 features and 8 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -87.67818 ymin: 41.89268 xmax: -87.63409 ymax: 41.96475 ## CRS: 4326 ## X Name Address City State Zip ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 ## 2 2 Sundace Methadone Treatment Center, LLC 4545 North Broadway St. Chicago IL 60640 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 ## 4 4 PDSSC - Chicago, Inc. 2260 N. Elston Ave. Chicago IL 60614 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 ## 6 6 Family Guidance Centers, Inc. 310 W. Chicago Ave. Chicago IL 60654 ## fullAdd geo_method geometry ## 1 4453 North Broadway st. Chicago IL 60640 osm POINT (-87.65566 41.96321) ## 2 4545 North Broadway St. Chicago IL 60640 osm POINT (-87.65694 41.96475) ## 3 3934 N. Lincoln Ave. Chicago IL 60613 census POINT (-87.67818 41.95331) ## 4 2260 N. Elston Ave. Chicago IL 60614 census POINT (-87.67407 41.92269) ## 5 609 N. Wells St. Chicago IL 60654 census POINT (-87.63409 41.89268) ## 6 310 W. Chicago Ave. Chicago IL 60654 census POINT (-87.63636 41.89657) Next, we load a shapefile of Chicago community areas. You can often find shapefiles (or spatial data formats like geojson) on city data portals for direct download. In our case, we used the data provided on the City of Chicago Data Portal, though we will walk you through downloading zip code boundaries directly through the Census via R in a later tutorial. Areas &lt;- st_read(&quot;data/geo_export_8027c825-e55a-4218-aac1-2d7676ad1b47.shp&quot;) ## Reading layer `geo_export_8027c825-e55a-4218-aac1-2d7676ad1b47&#39; from data source `/Users/maryniakolak/code/opioid-environment-toolkit/data/geo_export_8027c825-e55a-4218-aac1-2d7676ad1b47.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 77 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -87.94011 ymin: 41.64454 xmax: -87.52414 ymax: 42.02304 ## CRS: 4326 head(Areas) ## Simple feature collection with 6 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -87.7069 ymin: 41.79448 xmax: -87.58001 ymax: 41.99076 ## CRS: 4326 ## area area_num_1 area_numbe comarea comarea_id community perimeter shape_area shape_len ## 1 0 35 35 0 0 DOUGLAS 0 46004621 31027.05 ## 2 0 36 36 0 0 OAKLAND 0 16913961 19565.51 ## 3 0 37 37 0 0 FULLER PARK 0 19916705 25339.09 ## 4 0 38 38 0 0 GRAND BOULEVARD 0 48492503 28196.84 ## 5 0 39 39 0 0 KENWOOD 0 29071742 23325.17 ## 6 0 4 4 0 0 LINCOLN SQUARE 0 71352328 36624.60 ## geometry ## 1 MULTIPOLYGON (((-87.60914 4... ## 2 MULTIPOLYGON (((-87.59215 4... ## 3 MULTIPOLYGON (((-87.6288 41... ## 4 MULTIPOLYGON (((-87.60671 4... ## 5 MULTIPOLYGON (((-87.59215 4... ## 6 MULTIPOLYGON (((-87.67441 4... 3.3 Simple Overlay Map We can plot these quickly using the tmap library to ensure they are overlaying correctly. If they are, our coordinate systems are working correctly. When using tmap the first parameter references the spatial file we’d like to map (tm_shape), and the next parameter(s) indicate how we want to style the data. For polygons, we can style tm_borders to have a slightly transparent boundary. For the point data, we will use red dots that are sized appropriately using the tm_dots parameter. When working with tmap or any other library for the first time, it’s helpful to review the documentation and related tutorials for more tips on usability. ## 1st layer (gets plotted first) tm_shape(Areas) + tm_borders(alpha = 0.4) + ## 2nd layer (overlay) tm_shape(MetClinics) + tm_dots(size = 0.4, col=&quot;red&quot;) ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. 3.4 Spatial Transformation Next, we check the Coordinate Reference System for our data. Are the coordinate systems for clinic points and community areas the same? For R to treat both coordinate reference systems the same, the metadata has to be exact. st_crs(MetClinics) ## Coordinate Reference System: ## User input: 4326 ## wkt: ## GEOGCS[&quot;WGS 84&quot;, ## DATUM[&quot;WGS_1984&quot;, ## SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563, ## AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]] st_crs(Areas) ## Coordinate Reference System: ## User input: 4326 ## wkt: ## GEOGCS[&quot;WGS84(DD)&quot;, ## DATUM[&quot;WGS84&quot;, ## SPHEROID[&quot;WGS84&quot;,6378137.0,298.257223563]], ## PRIMEM[&quot;Greenwich&quot;,0.0], ## UNIT[&quot;degree&quot;,0.017453292519943295], ## AXIS[&quot;Geodetic longitude&quot;,EAST], ## AXIS[&quot;Geodetic latitude&quot;,NORTH]] We can see that while both have a code of 4326 and appear to both be WGS84 systems, they are not encoded in exactly the same why. Thus, R will treat them differently – which will pose problems for spatial analysis that interacts these two layers. One way of resolving this challenge is to transform the spatial reference system so that they are exact. To complicate matters, we are also interested in generating a buffer to approximate a “service area” around each methadone provider. If we want to use a buffer of two miles, we will need to use a spatial data reference system that uses an appropriate distance metric, like feet or meters. As noted in the previous tutorial the WGS84 coordinate reference system uses degrees, and is not an appropriate CRS for the spatial analysis we require. Thus, our next goal is to transform both spatial data files into a new, standardized CRS. 3.4.1 Transform CRS To calculate buffers, we will need to convert to a different CRS that preserves distance. Trying using a search engine like Google with search terms “CRS Illinois ft”, for example, to look for a code that provides what we need. After searching, we found EPSG:3435 uses feet for a distance metric. We’ll use that! First, set a new CRS. CRS.new &lt;- st_crs(&quot;EPSG:3435&quot;) Next, transform both datasets to your new CRS. MetClinics.3435 &lt;- st_transform(MetClinics, CRS.new) Areas.3435 &lt;- st_transform(Areas, CRS.new) Check the CRS of both datasets again. If they are identical you’re ready to move onto the next step! 3.5 Generate Buffers # Create 2-mile buffers for each house point MetClinic_buffers &lt;- st_buffer(MetClinics.3435, 10560) Inspect the structure of the object you just created. Note that this is a new data object, represented as a polygon. Each buffer around each point is a separate entity. 3.5.1 Visualize buffers # Map in tmap tm_shape(Areas.3435) + tm_borders() + tm_shape(MetClinics.3435) + tm_dots(col = &quot;blue&quot;) + tm_shape(MetClinic_buffers) + tm_borders(col = &quot;red&quot;) ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. # Map Housing Buffers tm_shape(Areas) + tm_borders() + tm_shape(MetClinic_buffers) + tm_fill(col = &quot;blue&quot;, alpha = .4) + tm_borders(col = &quot;blue&quot;) + tm_shape(MetClinics.3435) + tm_dots(col = &quot;red&quot;) ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. 3.5.2 Merge buffers union.buffers &lt;- st_union(MetClinic_buffers) 3.5.3 Visualize union of buffers # Map Housing Buffers tm_shape(Areas) + tm_borders()+ tm_shape(union.buffers) + tm_fill(col = &quot;blue&quot;, alpha = .2) + tm_borders(col = &quot;blue&quot;) + tm_shape(MetClinics.3435) + tm_dots(col = &quot;red&quot;, size = 0.4) ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. "],
["visualizeArealData-tutorial.html", "4 Thematic Mapping 4.1 Overview 4.2 Environment Setup 4.3 Load data 4.4 Thematic Plotting 4.5 Appendix", " 4 Thematic Mapping 4.1 Overview Once we have downloaded the contextual data and generated the access metrics, we can start visualizing them to identify any spatial patterns. This can help identify whether a variable is homogeneously distributed across space or do we see clustering &amp; spatial heterogeneity. In this tutorial we will cover methods to plot data variables spatially i.e. create thematic maps, technically known as choropleth maps. We will cover the most commonly used types of choropleth mapping techniques employed in R. Please note the methods covered here are mere an introduction to spatial plotting. Thus, in this tutorial our objectives are to: item 1 item 2 item 3 4.2 Environment Setup To replicate the codes &amp; functions illustrated in this tutorial, you’ll need to have R and RStudio downloaded and installed on your system. This tutorial assumes some familiarity with the R programming language. 4.2.0.1 Packages used We will use the following packages in this tutorial: tidyverse: to manipulate data tmap: to visualize and create maps sf: to read/write and manipulate spatial data 4.2.0.2 Required Inputs and Expected Outputs We will using the race data for Illinois downloaded &amp; saved as a shapefile using the get-ACS_Data tutorial from the Census Bureau. Our output will be three thematic maps highlighting the distribution of percentage hispanic population at a county level across the state of Illinois. 4.2.0.3 Load libraries First, load the libraries required. library(tidyverse) library(tmap) library(sf) 4.3 Load data We will read in the shapefile with percentage hispanic population at the county level for the state of Illinois for year 2018.Alternatively, if you have not saved the dataset from get-ACS-Data tutorial, you can access it here. ILcounties &lt;- st_read(&quot;data/IL_County_18.shp&quot;) ## Reading layer `IL_County_18&#39; from data source `/Users/maryniakolak/code/opioid-environment-toolkit/data/IL_County_18.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 102 features and 8 fields ## geometry type: POLYGON ## dimension: XY ## bbox: xmin: -91.51308 ymin: 36.9703 xmax: -87.4952 ymax: 42.50848 ## CRS: 4269 head(ILcounties) ## Simple feature collection with 6 features and 8 fields ## geometry type: POLYGON ## dimension: XY ## bbox: xmin: -91.51308 ymin: 36.9703 xmax: -88.70541 ymax: 42.49505 ## CRS: 4269 ## GEOID STATEFP COUNTYFP totPop18 hispPr18 WhitePr18 AfrAmPr18 AsianPr18 geometry ## 1 17001 17 001 66427 0.01537026 0.9306306 0.040826772 0.0081292246 POLYGON ((-91.51297 40.1810... ## 2 17003 17 003 6532 0.01117575 0.6243111 0.332057563 0.0009185548 POLYGON ((-89.51839 37.2893... ## 3 17005 17 005 16712 0.03458593 0.9088679 0.062410244 0.0117280996 POLYGON ((-89.63926 38.9991... ## 4 17007 17 007 53606 0.21376338 0.8741745 0.022199008 0.0118083797 POLYGON ((-88.94098 42.2388... ## 5 17009 17 009 6675 0.04284644 0.7742322 0.204344569 0.0055430712 POLYGON ((-90.91703 39.9022... ## 6 17011 17 011 33381 0.08972170 0.9361613 0.009316677 0.0086576196 POLYGON ((-89.86235 41.584,... Lets review the dataset structure. In the R sf data object, the ‘geometry’ column provides the geographic information/boundaries that we can map. This is unique to simple features data structures, and a pretty phenomenal concept. We can do a quick plot using: plot(ILcounties$geometry) Before we move ahead, lets convert the percentages for easy plotting using some tidyverse thinking. View the dataframe afterwards to confirm your change was successful. **Moksha note – please explain what is happening here, how this uses the tidyvrse, etc – ILcounties &lt;- ILcounties %&gt;% mutate_at(vars(hispPr18:AsianPr18), .funs = funs(round(. * 100,2))) head(ILcounties) ## Simple feature collection with 6 features and 8 fields ## geometry type: POLYGON ## dimension: XY ## bbox: xmin: -91.51308 ymin: 36.9703 xmax: -88.70541 ymax: 42.49505 ## CRS: 4269 ## GEOID STATEFP COUNTYFP totPop18 hispPr18 WhitePr18 AfrAmPr18 AsianPr18 geometry ## 1 17001 17 001 66427 1.54 93.06 4.08 0.81 POLYGON ((-91.51297 40.1810... ## 2 17003 17 003 6532 1.12 62.43 33.21 0.09 POLYGON ((-89.51839 37.2893... ## 3 17005 17 005 16712 3.46 90.89 6.24 1.17 POLYGON ((-89.63926 38.9991... ## 4 17007 17 007 53606 21.38 87.42 2.22 1.18 POLYGON ((-88.94098 42.2388... ## 5 17009 17 009 6675 4.28 77.42 20.43 0.55 POLYGON ((-90.91703 39.9022... ## 6 17011 17 011 33381 8.97 93.62 0.93 0.87 POLYGON ((-89.86235 41.584,... 4.4 Thematic Plotting We will be using tmap package for plotting spatial data distributions. The package syntax has similarities with ggplot2 and follows the same idea of A Layered Grammar of Graphics. for each input data layer use tm_shape(), followed by the method to plot it, e.g tm_fill() or tm_dots() or tm_line() or tm_borders() etc. Similar to ggplot2, aesthetics can be provided for each layer and plot layout can be manipulated using tm_layout(). For more details on tmap usage &amp; functionality, check tmap documentation. The previous map we plotted using plot can be mapped using tmap as in the code below. tmap_mode(&#39;plot&#39;) ## tmap mode set to plotting tm_shape(ILcounties) + tm_borders() + tm_layout(frame = FALSE) In tmap, the classification scheme is set by the style option in tm_fill() and the default style is pretty. Lets plot the distribution of percentage of hispanic population by county across the state of Illinois with default style using the code below. We can also change the color palette used to depict the spatial distribution. See Set Color Palette in Appendix for more details on that. tm_shape(ILcounties) + tm_fill(&#39;hispPr18&#39;, title = &#39;PctHispanic% - Pretty&#39;) + tm_borders() + tm_layout(frame = FALSE, legend.outside = TRUE, legend.outside.position = &#39;right&#39;, legend.title.size = 0.9, main.title = &#39;Pct of hispanic population by county, IL 2018&#39;, main.title.size = 0.9) We will be plotting the spatial distribution of variable hispPr18 for the state of Illinois using three methods. Quantile Natural Breaks Standard Deviation For detailed documentation on choropleth mapping and methods use check GeoDa Center Documentation. 4.4.1 Quantile A quantile map is based on sorted values for the variable that are then grouped into bins such that each bin has the same number of observations. It is obtained by setting style = 'quantile' and n = no of bins arguments in tm_fill(). p1 &lt;- tm_shape(ILcounties) + tm_fill(&#39;hispPr18&#39;, title = &#39;PctHispanic% - Quantile&#39;, style = &#39;quantile&#39;, n = 5) + tm_borders() + tm_layout(frame = FALSE,legend.outside = TRUE, legend.outside.position = &#39;right&#39;, legend.title.size =0.9, main.title = &#39;Pct of hispanic population by county, IL 2018&#39;, main.title.size = 0.9) #tmap_save(p1, &#39;PctHisp_18_Quantile.png&#39;) # save the map in a .png file p1 4.4.2 Natural Breaks Natural breaks or jenks distribution uses a nonlinear algorithm to cluster data into groups such that the intra-bin similarity is maximized and inter-bin dissimilarity is minimized. It is obtained by setting style = 'jenks' and n = no. of bins in the tm_fill(). As we can see, jenks method better classifies the dataset in review than the quantile distribution. There is no correct method to use and the choice of classification method is dependent on the problem &amp; dataset used. p2 &lt;- tm_shape(ILcounties) + tm_fill(&#39;hispPr18&#39;, title = &#39;PctHispanic% - Jenks&#39;, style = &#39;jenks&#39;, n = 5) + tm_borders() + tm_layout(frame = FALSE,legend.outside = TRUE, legend.outside.position = &#39;right&#39;, legend.title.size =0.9, main.title = &#39;Pct of hispanic population by county, IL 2018&#39;, main.title.size = 0.9) #tmap_save(p2, &#39;PctHisp_18_Jenks.png&#39;)# save the map in a .png file p2 4.4.3 Standard Deviation A standard deviation map normalizes the dataset (mean = 0, stdev = 1) and transforms it into units of stdev (given mean =0). It helps identify outliers in the dataset. It is obtained by setting style = 'sd' in the tm_fill(). The normalization process can create bins with negative values, which in this case don’t necessarily make sense for the dataset, but it still helps identify the outliers. p3 &lt;- tm_shape(ILcounties) + tm_fill(&#39;hispPr18&#39;, title = &#39;PctHispanic% - Stdev&#39;, style = &#39;sd&#39;) + tm_borders() + tm_layout(frame = FALSE, legend.outside = TRUE, legend.outside.position = &#39;right&#39;, legend.title.size =0.9, main.title = &#39;Pct of hispanic population by county, IL 2018&#39;, main.title.size = 0.9) #tmap_save(p3, &#39;PctHisp_18_Stdev.png&#39;)# save the map in a .png file p3 4.5 Appendix Set Color Palette The range of colors used to depict the distribution in the map can be set by modifying the palette argument in tm_fill(). For example, we can use Blues palette to create the map below. tm_shape(ILcounties) + tm_fill(&#39;hispPr18&#39;, title = &#39;PctHispanic% - Jenks&#39;, style = &#39;jenks&#39;, n = 5, palette = &#39;Blues&#39;) + tm_borders() + tm_layout(frame = FALSE,legend.outside = TRUE, legend.outside.position = &#39;right&#39;, legend.title.size =0.9, main.title = &#39;Pct of hispanic population by county, IL 2018&#39;, main.title.size = 0.9) Use ColorBrewer To build aesthetically pleasing and easy-to-read maps, we recommend using color palette schemes recommended in ColorBrewer 2.0 developed by Cynthia Brewer. The website distinguishes between sequential(ordered), diverging(spread around a center) &amp; qualitative(categorical) data. Information on these palettes cab be displayed in R using RColorBrewer package. We can get the hex values for the colors used in a specific palette with n bins &amp; plot the corresponding colors using code below. require(RColorBrewer) RColorBrewer::brewer.pal(5,&quot;PuBuGn&quot;) ## [1] &quot;#F6EFF7&quot; &quot;#BDC9E1&quot; &quot;#67A9CF&quot; &quot;#1C9099&quot; &quot;#016C59&quot; RColorBrewer::display.brewer.pal(5,&quot;PuBuGn&quot;) We can update the jenks map by using this sequential color scheme and changing the transparency using alpha = 0.8 as below. tm_shape(ILcounties) + tm_fill(&#39;hispPr18&#39;, title = &#39;PctHispanic% - Jenks&#39;, style = &#39;jenks&#39;, n = 5, palette = &#39;PuBuGn&#39;) + tm_borders() + tm_layout(frame = FALSE, legend.outside = TRUE, legend.outside.position = &#39;right&#39;, legend.title.size =0.9, main.title = &#39;Pct of hispanic population by county, IL 2018&#39;, main.title.size = 0.9) We can also update the stdev map by using a diverging color scheme as below. tm_shape(ILcounties) + tm_fill(&#39;hispPr18&#39;, title = &#39;PctHispanic% - Stdev&#39;, style = &#39;sd&#39;, palette = &#39;-RdBu&#39;, alpha = 0.9) + tm_borders() + tm_layout(frame = FALSE, legend.outside = TRUE, legend.outside.position = &#39;right&#39;, legend.title.size =0.9, main.title = &#39;Pct of hispanic population by county, IL 2018&#39;, main.title.size = 0.9) "],
["centroid-access-tutorial.html", "5 Min. Dist Access Analysis 5.1 Overview 5.2 Environment Setup 5.3 Read in resource data 5.4 Read in zip code data 5.5 Calculate centroids of zip code boundaries 5.6 Standardize CRS Calculate min distance Save Data", " 5 Min. Dist Access Analysis 5.1 Overview Spatial Access to specific resource is often considered a multidimensional concept where accessibility can be measured on affordability, availability, accommodation &amp; acceptability [include reference]. Distance to the nearest resource is a common metric used to capture the availability of a resource, and in this tutorial we demonstrate how to calculate a minimum distance value from a zip code centroid to a set of resources, such as locations of methadone clinics. Each zip code will be assigned a “minimum distance access metric” as a value that indicates access to resources from that zip code. 5.2 Environment Setup To replicate the codes &amp; functions illustrated in this tutorial, you’ll need to have R and RStudio downloaded and installed on your system. This tutorial assumes some familiarity with the R programming language. 5.2.0.1 Packages used We will use the following packages in this tutorial: sf: to manipulate spatial data tmap: to visualize and create maps units: to convert units within spatial data 5.2.0.2 Required Inputs and Expected Outputs Our inputs will be: a CSV file with the locations of our resources (“chicago_methadone.csv”), and a zip code boundary file (“chicago_zips.shp”). We will calculate the minimum distance between the resources and the centroids of the zip codes, then save the results as a shapefile and as a CSV. Our final result will be a shapefile/CSV with the minimum distance value for each zip. 5.2.0.3 Install and load the packages First, let’s install the relevant R packages: install.packages(&quot;sf&quot;) install.packages(&quot;tmap&quot;) install.packages(&quot;units&quot;) Then load the libraries for use. (The message you see about GEOS, GDAL, and PROJ refer to the software libraries that allow you to work with spatial data.) library(sf) library(tmap) library(units) 5.3 Read in resource data We will use a CSV of methadone clinic addresses in Chicago as an example. This file represents point locations of clinics. methadone_clinics &lt;- read.csv(&quot;data/chicago_methadone.csv&quot;) Let’s take a look at the first few rows of the dataset. head(methadone_clinics) ## X Name Address City State Zip Longitude ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 -87.65594 ## 2 2 Sundace Methadone Treatment Center, LLC 4545 North Broadway St. Chicago IL 60640 -87.65703 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 -87.67844 ## 4 4 PDSSC - Chicago, Inc. 2260 N. Elston Ave. Chicago IL 60614 -87.67412 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 -87.63406 ## 6 6 Family Guidance Centers, Inc. 310 W. Chicago Ave. Chicago IL 60654 -87.63635 ## Latitude ## 1 41.96303 ## 2 41.96481 ## 3 41.95321 ## 4 41.92272 ## 5 41.89273 ## 6 41.89660 Our data has been geocoded, which means that it has latitude and longitude as columns associated with the address in the data. If you do not have this information, check the Geocoding and Visualizing Point Data to geocode your data. Next we convert the dataframe of addresses to a spatial data frame using the st_as_sf() function. The coords argument specifies which two columns are the X and Y for your data. We set the crs argument equal to 4326 because this data is in latitude and longitude (otherwise known as “unprojected”, which means it is not in feet or meters). meth_sf &lt;- st_as_sf(methadone_clinics, coords = c(&quot;Longitude&quot;, &quot;Latitude&quot;), crs = 4326) meth_sf ## Simple feature collection with 27 features and 6 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -87.73491 ymin: 41.68699 xmax: -87.57656 ymax: 41.96481 ## CRS: EPSG:4326 ## First 10 features: ## X Name Address City State Zip ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 ## 2 2 Sundace Methadone Treatment Center, LLC 4545 North Broadway St. Chicago IL 60640 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 ## 4 4 PDSSC - Chicago, Inc. 2260 N. Elston Ave. Chicago IL 60614 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 ## 6 6 Family Guidance Centers, Inc. 310 W. Chicago Ave. Chicago IL 60654 ## 7 7 A Rincon Family Services 3809 W. Grand Ave. Chicago IL 60651 ## 8 8 * 140 N. Ashland Ave. Chicago IL 60607 ## 9 9 Healthcare Alternative Systems, Inc./NEXA 210 N. Ashland Ave. Chicago IL 60607 ## 10 10 Specialized Assistance Services, NFP 2630 S. Wabash Ave. Chicago IL 60616 ## geometry ## 1 POINT (-87.65594 41.96303) ## 2 POINT (-87.65703 41.96481) ## 3 POINT (-87.67844 41.95321) ## 4 POINT (-87.67412 41.92272) ## 5 POINT (-87.63406 41.89273) ## 6 POINT (-87.63635 41.8966) ## 7 POINT (-87.72196 41.90436) ## 8 POINT (-87.66694 41.8847) ## 9 POINT (-87.667 41.88561) ## 10 POINT (-87.6253 41.84459) Note that this is a data frame, but that it has a final column called “geometry” that stores the spatial information. We can now plot the location of the methadone clinics with base R. We use the st_geometry() function to just get a single point map from the geographies. plot(st_geometry(meth_sf)) To make a slightly more interesting map, you can add an interactive basemap with tmap, using the tmap_mode function to change to “view” mode: tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(meth_sf) + tm_dots() ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. 5.4 Read in zip code data If you have zip code boundary data from the Census (or other relevant site), you can load them into R with the read_sf command. Boundary data is commonly stored in the shapefile format, which has both a spatial (.shp, .shx, .prj) and a flat-file (.dbf) component. Shapefiles are made of four files (.shp, .shx, .prj, .dbf), all which needed to be in the same folder for the file to be read. chicago_zips &lt;- read_sf(&quot;data/chicago_zips.shp&quot;) Note: If you do not have the zip boundary data, please see the Get Geometry from [Downloading Community Contextual Data] (#contextual-data) for instructions on how to pull them directly from the Census website into R. If we take a look at the top of the data, we can see that the zip codes have data attached to them. The last column is the “geometry” column, which stores the spatial data. Additionally, there is a header with some spatial metadata about the data frame, including the type of geometry (“MULTIPOLYGON”), the bounding box (the square that surrounds your data), and the geographic projection (4326 is the shortcode reference for the string that starts “+proj=longlat +datum=WGS84 +no_defs”). Otherwise, this is just like your normal R tabular data frame. head(chicago_zips) ## Simple feature collection with 6 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -88.06058 ymin: 41.73452 xmax: -87.58209 ymax: 42.04052 ## CRS: 4326 ## # A tibble: 6 x 10 ## ZCTA5CE10 GEOID10 CLASSFP10 MTFCC10 FUNCSTAT10 ALAND10 AWATER10 INTPTLAT10 INTPTLON10 geometry ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;MULTIPOLYGON [°]&gt; ## 1 60501 60501 B5 G6350 S 12532295 974360 +41.78022… -087.8232… (((-87.86289 41.7544, -87.86247 4… ## 2 60007 60007 B5 G6350 S 36493383 917560 +42.00860… -087.9973… (((-88.06058 41.9997, -88.06057 4… ## 3 60651 60651 B5 G6350 S 9052862 0 +41.90209… -087.7408… (((-87.77559 41.90875, -87.77498 … ## 4 60652 60652 B5 G6350 S 12987857 0 +41.74793… -087.7147… (((-87.74205 41.77113, -87.74182 … ## 5 60653 60653 B5 G6350 S 6041418 1696670 +41.81996… -087.6059… (((-87.62623 41.81469, -87.6259 4… ## 6 60654 60654 B5 G6350 S 1464813 113471 +41.89182… -087.6383… (((-87.64775 41.8964, -87.64764 4… We can check that we pulled the zip code data properly by plotting it. Again, we use the st_geometry() function to just get the outline of the geometries. plot(st_geometry(chicago_zips)) We can add a second layer in blue with the access locations: plot(st_geometry(chicago_zips)) plot(st_geometry(meth_sf), col = &quot;blue&quot;, add = TRUE) With multiple layers, it can be easier to use tmap to plot: tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(chicago_zips) + tm_borders() + tm_shape(meth_sf) + tm_dots(col = &quot;blue&quot;, size = 0.2) Again, we can create an interactive map with tmap: tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(chicago_zips) + tm_borders() + tm_shape(meth_sf) + tm_dots() ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. 5.5 Calculate centroids of zip code boundaries Now, we will calculate the centroids of the zip code boundaries. We will first need to project our data, which means change it from latitude and longitude to meaningful units, like ft or meters, so we can calculate distance properly. We’ll use the Illinois State Plane projection, with an EPSG code of 3435. Aside: To find the most appropriate projection for your data, do a Google Search for which projection works well - for state level data, each state has a State Plane projection with a specific code, known as the EPSG. I use epsg.io to check projections - here’s the New York State Plane page. Use the st_transform function to change the projection of the data. Notice how the values in geometry go from being relatively small (unprojected, lat/long) to very large (projected, in US feet). chicago_zips &lt;- st_transform(chicago_zips, 3435) chicago_zips ## Simple feature collection with 85 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 1058388 ymin: 1791133 xmax: 1205317 ymax: 1966816 ## CRS: EPSG:3435 ## # A tibble: 85 x 10 ## ZCTA5CE10 GEOID10 CLASSFP10 MTFCC10 FUNCSTAT10 ALAND10 AWATER10 INTPTLAT10 INTPTLON10 geometry ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;MULTIPOLYGON [US_survey_foot]&gt; ## 1 60501 60501 B5 G6350 S 12532295 974360 +41.78022… -087.8232… (((1112613 1853447, 1112726 1853… ## 2 60007 60007 B5 G6350 S 36493383 917560 +42.00860… -087.9973… (((1058389 1942598, 1058390 1942… ## 3 60651 60651 B5 G6350 S 9052862 0 +41.90209… -087.7408… (((1136069 1909833, 1136235 1909… ## 4 60652 60652 B5 G6350 S 12987857 0 +41.74793… -087.7147… (((1145542 1859745, 1145607 1859… ## 5 60653 60653 B5 G6350 S 6041418 1696670 +41.81996… -087.6059… (((1177007 1875855, 1177096 1875… ## 6 60654 60654 B5 G6350 S 1464813 113471 +41.89182… -087.6383… (((1170904 1905583, 1170932 1905… ## 7 60655 60655 B5 G6350 S 11408010 0 +41.69477… -087.7037… (((1146378 1830511, 1146444 1830… ## 8 60656 60656 B5 G6350 S 8465226 0 +41.97428… -087.8271… (((1110359 1933204, 1110389 1933… ## 9 60657 60657 B5 G6350 S 5888324 2025836 +41.94029… -087.6468… (((1162394 1923242, 1162526 1923… ## 10 60659 60659 B5 G6350 S 5251086 2818 +41.99148… -087.7039… (((1148555 1941516, 1148713 1941… ## # … with 75 more rows Then, we will calculate the centroids: chicago_centroids &lt;- st_centroid(chicago_zips) ## Warning in st_centroid.sf(chicago_zips): st_centroid assumes attributes are constant over geometries of x chicago_centroids ## Simple feature collection with 85 features and 9 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 1076716 ymin: 1802621 xmax: 1198093 ymax: 1956017 ## CRS: EPSG:3435 ## # A tibble: 85 x 10 ## ZCTA5CE10 GEOID10 CLASSFP10 MTFCC10 FUNCSTAT10 ALAND10 AWATER10 INTPTLAT10 INTPTLON10 geometry ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;POINT [US_survey_foot]&gt; ## 1 60501 60501 B5 G6350 S 12532295 974360 +41.7802209 -087.8232440 (1123181 1862885) ## 2 60007 60007 B5 G6350 S 36493383 917560 +42.0086000 -087.9973398 (1076716 1945541) ## 3 60651 60651 B5 G6350 S 9052862 0 +41.9020934 -087.7408565 (1145540 1907470) ## 4 60652 60652 B5 G6350 S 12987857 0 +41.7479319 -087.7147951 (1153039 1851344) ## 5 60653 60653 B5 G6350 S 6041418 1696670 +41.8199645 -087.6059654 (1182494 1877789) ## 6 60654 60654 B5 G6350 S 1464813 113471 +41.8918225 -087.6383036 (1173771 1904104) ## 7 60655 60655 B5 G6350 S 11408010 0 +41.6947762 -087.7037764 (1156187 1831997) ## 8 60656 60656 B5 G6350 S 8465226 0 +41.9742800 -087.8271283 (1121899 1933624) ## 9 60657 60657 B5 G6350 S 5888324 2025836 +41.9402931 -087.6468569 (1170365 1921589) ## 10 60659 60659 B5 G6350 S 5251086 2818 +41.9914885 -087.7039859 (1155320 1939992) ## # … with 75 more rows For each zip code, this will calculate the centroid, and the output will be a point dataset. Plot to double check that everything is ok. The st_geometry() function will once again just return the outline: plot(st_geometry(chicago_zips)) plot(st_geometry(chicago_centroids), add = TRUE, col = &quot;red&quot;) Once again, we can create an interactive map: tm_shape(chicago_zips) + tm_borders() + tm_shape(chicago_centroids) + tm_dots() ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. 5.6 Standardize CRS If we immediately try to calculate the distance between the zip centroids and the locations of the resources using the st_distance function, we’ll get an error: st_distance(chicago_centroids, meth_sf, by_element = TRUE) Error in st_distance(chicago_centroids, meth_sf, by_element = TRUE) : st_crs(x) == st_crs(y) is not TRUE Why is there an error? Because the projection of the centroids and the resource locations don’t match up. Let’s project the resource locations so that they match the projection of the centroids. First, use the st_crs function to check that the coordinate reference system (or projection) is the same. They’re not, so we have to fix it. st_crs(chicago_centroids) ## Coordinate Reference System: ## User input: EPSG:3435 ## wkt: ## PROJCS[&quot;NAD83 / Illinois East (ftUS)&quot;, ## GEOGCS[&quot;NAD83&quot;, ## DATUM[&quot;North_American_Datum_1983&quot;, ## SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101, ## AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]], ## TOWGS84[0,0,0,0,0,0,0], ## AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]], ## PROJECTION[&quot;Transverse_Mercator&quot;], ## PARAMETER[&quot;latitude_of_origin&quot;,36.66666666666666], ## PARAMETER[&quot;central_meridian&quot;,-88.33333333333333], ## PARAMETER[&quot;scale_factor&quot;,0.999975], ## PARAMETER[&quot;false_easting&quot;,984250.0000000002], ## PARAMETER[&quot;false_northing&quot;,0], ## UNIT[&quot;US survey foot&quot;,0.3048006096012192, ## AUTHORITY[&quot;EPSG&quot;,&quot;9003&quot;]], ## AXIS[&quot;X&quot;,EAST], ## AXIS[&quot;Y&quot;,NORTH], ## AUTHORITY[&quot;EPSG&quot;,&quot;3435&quot;]] st_crs(meth_sf) ## Coordinate Reference System: ## User input: EPSG:4326 ## wkt: ## GEOGCS[&quot;WGS 84&quot;, ## DATUM[&quot;WGS_1984&quot;, ## SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563, ## AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]] We’ll take the CRS from the zip code centroids data, and use it as input to st_transform applied to the methadone clinics data. new_crs &lt;- st_crs(chicago_centroids) new_crs ## Coordinate Reference System: ## User input: EPSG:3435 ## wkt: ## PROJCS[&quot;NAD83 / Illinois East (ftUS)&quot;, ## GEOGCS[&quot;NAD83&quot;, ## DATUM[&quot;North_American_Datum_1983&quot;, ## SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101, ## AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]], ## TOWGS84[0,0,0,0,0,0,0], ## AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]], ## PROJECTION[&quot;Transverse_Mercator&quot;], ## PARAMETER[&quot;latitude_of_origin&quot;,36.66666666666666], ## PARAMETER[&quot;central_meridian&quot;,-88.33333333333333], ## PARAMETER[&quot;scale_factor&quot;,0.999975], ## PARAMETER[&quot;false_easting&quot;,984250.0000000002], ## PARAMETER[&quot;false_northing&quot;,0], ## UNIT[&quot;US survey foot&quot;,0.3048006096012192, ## AUTHORITY[&quot;EPSG&quot;,&quot;9003&quot;]], ## AXIS[&quot;X&quot;,EAST], ## AXIS[&quot;Y&quot;,NORTH], ## AUTHORITY[&quot;EPSG&quot;,&quot;3435&quot;]] meth_sf &lt;- st_transform(meth_sf, new_crs) If we check the CRS again, we now see that they match. Mismatched projections are a commonly made mistake in geospatial data processing. st_crs(chicago_centroids) ## Coordinate Reference System: ## User input: EPSG:3435 ## wkt: ## PROJCS[&quot;NAD83 / Illinois East (ftUS)&quot;, ## GEOGCS[&quot;NAD83&quot;, ## DATUM[&quot;North_American_Datum_1983&quot;, ## SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101, ## AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]], ## TOWGS84[0,0,0,0,0,0,0], ## AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]], ## PROJECTION[&quot;Transverse_Mercator&quot;], ## PARAMETER[&quot;latitude_of_origin&quot;,36.66666666666666], ## PARAMETER[&quot;central_meridian&quot;,-88.33333333333333], ## PARAMETER[&quot;scale_factor&quot;,0.999975], ## PARAMETER[&quot;false_easting&quot;,984250.0000000002], ## PARAMETER[&quot;false_northing&quot;,0], ## UNIT[&quot;US survey foot&quot;,0.3048006096012192, ## AUTHORITY[&quot;EPSG&quot;,&quot;9003&quot;]], ## AXIS[&quot;X&quot;,EAST], ## AXIS[&quot;Y&quot;,NORTH], ## AUTHORITY[&quot;EPSG&quot;,&quot;3435&quot;]] st_crs(meth_sf) ## Coordinate Reference System: ## User input: EPSG:3435 ## wkt: ## PROJCS[&quot;NAD83 / Illinois East (ftUS)&quot;, ## GEOGCS[&quot;NAD83&quot;, ## DATUM[&quot;North_American_Datum_1983&quot;, ## SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101, ## AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]], ## TOWGS84[0,0,0,0,0,0,0], ## AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]], ## PROJECTION[&quot;Transverse_Mercator&quot;], ## PARAMETER[&quot;latitude_of_origin&quot;,36.66666666666666], ## PARAMETER[&quot;central_meridian&quot;,-88.33333333333333], ## PARAMETER[&quot;scale_factor&quot;,0.999975], ## PARAMETER[&quot;false_easting&quot;,984250.0000000002], ## PARAMETER[&quot;false_northing&quot;,0], ## UNIT[&quot;US survey foot&quot;,0.3048006096012192, ## AUTHORITY[&quot;EPSG&quot;,&quot;9003&quot;]], ## AXIS[&quot;X&quot;,EAST], ## AXIS[&quot;Y&quot;,NORTH], ## AUTHORITY[&quot;EPSG&quot;,&quot;3435&quot;]] Now we have the zip boundaries, the centroids of the zips, and the resource locations, as shown below. Next, we will calculate the distance to the nearest resource from each zip code centroid. plot(st_geometry(chicago_zips)) plot(st_geometry(chicago_centroids), col = &quot;red&quot;, add = TRUE) plot(st_geometry(meth_sf), col = &quot;blue&quot;, add = TRUE) Calculate min distance First, we’ll identify the resource that is the closest to a zip centroid using the st_nearest_feature function. (It will return the index of the object that is nearest, so we will subset the resources by the index to get the nearest object.) nearest_clinic_indexes &lt;- st_nearest_feature(chicago_centroids, meth_sf) nearest_clinic &lt;- meth_sf[nearest_clinic_indexes,] nearest_clinic ## Simple feature collection with 85 features and 6 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 1147259 ymin: 1829334 xmax: 1190725 ymax: 1930492 ## CRS: EPSG:3435 ## First 10 features: ## X Name Address City State Zip ## 16 16 Katherine Boone Robinson Foundation 4100 W. Ogden Ave. Chicago IL 60623 ## 7 7 A Rincon Family Services 3809 W. Grand Ave. Chicago IL 60651 ## 7.1 7 A Rincon Family Services 3809 W. Grand Ave. Chicago IL 60651 ## 26 26 New Hope Community Service Center 2559 W. 79th St. Chicago IL 60652 ## 15 15 HRDI- Grand Boulevard Professional Counseling Center 340 E. 51st St. Chicago IL 60615 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 ## 26.1 26 New Hope Community Service Center 2559 W. 79th St. Chicago IL 60652 ## 7.2 7 A Rincon Family Services 3809 W. Grand Ave. Chicago IL 60651 ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 ## geometry ## 16 POINT (1149563 1888684) ## 7 POINT (1150678 1908331) ## 7.1 POINT (1150678 1908331) ## 26 POINT (1160443 1852136) ## 15 POINT (1179400 1871296) ## 5 POINT (1174640 1904278) ## 26.1 POINT (1160443 1852136) ## 7.2 POINT (1150678 1908331) ## 1 POINT (1168480 1929847) ## 3 POINT (1162389 1926221) Then, we will calculate the distance between the nearest resource and the zip code centroid with the st_distance function. As shown above, make sure both of your datasets are projected, and in the same projection, before you run st_distance. min_dists &lt;- st_distance(chicago_centroids, nearest_clinic, by_element = TRUE) min_dists ## Units: [US_survey_foot] ## [1] 36899.7187 82794.9499 5210.0088 7446.1648 7192.4268 885.6142 20584.4913 38314.4490 8469.9351 15479.7403 ## [11] 9796.8522 4469.3071 33683.4980 24082.8186 24169.2397 45189.1792 31267.0776 10254.9649 10958.9389 13821.3363 ## [21] 49825.9391 32430.5115 36620.8289 22036.8980 13688.1510 22177.9153 63240.9022 4249.2975 3766.8707 5131.5781 ## [31] 5548.8181 8889.3859 3988.0292 5492.6866 7091.5663 6849.3251 3958.0982 45915.8759 32569.9607 44521.9752 ## [41] 58458.5465 5406.8794 5887.8101 2278.0342 6660.2051 5735.8249 304.8631 13604.9478 6942.3909 4993.9155 ## [51] 2841.4986 1679.0098 7651.3608 2529.0080 1667.5299 9406.8277 16622.9728 2042.7828 11421.7437 22480.9662 ## [61] 12104.7974 7613.8768 39613.5103 11724.1443 18463.5889 27529.9719 5232.8529 8774.4241 25352.7928 18954.0196 ## [71] 26416.7824 7550.1810 3455.8152 10997.6485 3097.7944 16812.6822 6171.7070 25247.7440 17149.4029 15235.8434 ## [81] 25019.9566 18574.8897 20179.9325 33065.4125 22450.6644 This is in US feet. To change to a more meaningful unit, such as miles, we can use the set_units() function: min_dists_mi &lt;- set_units(min_dists, &quot;mi&quot;) min_dists_mi ## Units: [mi] ## [1] 6.98859707 15.68089308 0.98674606 1.41026130 1.36220476 0.16773030 3.89858569 7.25653895 1.60415759 ## [10] 2.93177485 1.85546815 0.84646137 6.37946314 4.56114901 4.57751667 8.55857378 5.92180684 1.94223208 ## [19] 2.07556077 2.61768256 9.43674977 6.14215462 6.93577693 4.17366328 2.59245803 4.20037114 11.97746755 ## [28] 0.80479280 0.71342392 0.97189174 1.05091463 1.68359919 0.75531008 1.04028363 1.34310236 1.29722327 ## [37] 0.74964130 8.69620601 6.16856550 8.43220914 11.07171655 1.02403224 1.11511778 0.43144674 1.26140501 ## [46] 1.08633265 0.05773933 2.57669981 1.31484938 0.94581922 0.53816370 0.31799492 1.44912426 0.47897974 ## [55] 0.31582069 1.78159972 3.14829660 0.38689146 2.16321335 4.25776726 2.29257984 1.44202501 7.50257377 ## [64] 2.22048632 3.49689882 5.21402025 0.99107260 1.66182607 4.80167491 3.58978362 5.00318849 1.42996139 ## [73] 0.65451176 2.08289214 0.58670466 3.18422648 1.16888624 4.78177925 3.24799947 2.88558217 4.73863762 ## [82] 3.51797856 3.82196456 6.26240125 4.25202828 We then rejoin the minimum distances to the zip code data, by column binding min_dists_mi to the original chicago_zips data. min_dist_sf &lt;- cbind(chicago_zips, min_dists_mi) min_dist_sf ## Simple feature collection with 85 features and 10 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 1058388 ymin: 1791133 xmax: 1205317 ymax: 1966816 ## CRS: EPSG:3435 ## First 10 features: ## ZCTA5CE10 GEOID10 CLASSFP10 MTFCC10 FUNCSTAT10 ALAND10 AWATER10 INTPTLAT10 INTPTLON10 min_dists_mi ## 1 60501 60501 B5 G6350 S 12532295 974360 +41.7802209 -087.8232440 6.9885971 [mi] ## 2 60007 60007 B5 G6350 S 36493383 917560 +42.0086000 -087.9973398 15.6808931 [mi] ## 3 60651 60651 B5 G6350 S 9052862 0 +41.9020934 -087.7408565 0.9867461 [mi] ## 4 60652 60652 B5 G6350 S 12987857 0 +41.7479319 -087.7147951 1.4102613 [mi] ## 5 60653 60653 B5 G6350 S 6041418 1696670 +41.8199645 -087.6059654 1.3622048 [mi] ## 6 60654 60654 B5 G6350 S 1464813 113471 +41.8918225 -087.6383036 0.1677303 [mi] ## 7 60655 60655 B5 G6350 S 11408010 0 +41.6947762 -087.7037764 3.8985857 [mi] ## 8 60656 60656 B5 G6350 S 8465226 0 +41.9742800 -087.8271283 7.2565390 [mi] ## 9 60657 60657 B5 G6350 S 5888324 2025836 +41.9402931 -087.6468569 1.6041576 [mi] ## 10 60659 60659 B5 G6350 S 5251086 2818 +41.9914885 -087.7039859 2.9317749 [mi] ## geometry ## 1 MULTIPOLYGON (((1112613 185... ## 2 MULTIPOLYGON (((1058389 194... ## 3 MULTIPOLYGON (((1136069 190... ## 4 MULTIPOLYGON (((1145542 185... ## 5 MULTIPOLYGON (((1177007 187... ## 6 MULTIPOLYGON (((1170904 190... ## 7 MULTIPOLYGON (((1146378 183... ## 8 MULTIPOLYGON (((1110359 193... ## 9 MULTIPOLYGON (((1162394 192... ## 10 MULTIPOLYGON (((1148555 194... We can now visualize the zip-level access to methadone clinics using our new access metric, using the tmap package. tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(min_dist_sf) + tm_polygons(&quot;min_dists_mi&quot;, title = &quot;Minimum Distance (mi)&quot;) + tm_layout(main.title = &quot;Minimum Distance from Zip Centroid\\n to Methadone Clinic&quot;, main.title.position = &quot;center&quot;, main.title.size = 1) Access by zip code can also be combined with locations of resources: tm_shape(min_dist_sf) + tm_polygons(&quot;min_dists_mi&quot;, title = &quot;Minimum Distance (mi)&quot;) + tm_shape(meth_sf) + tm_dots(size = 0.2) + tm_layout(main.title = &quot;Minimum Distance from Zip Centroid\\n to Methadone Clinic&quot;, main.title.position = &quot;center&quot;, main.title.size = 1) Save Data To save our final result to a CSV, use the layer_options = &quot;GEOMETRY=AS_XY&quot; command. Note that this option only works when you are working with point data. write_sf(min_dist_sf, &quot;min_dist.csv&quot;, layer_options = &quot;GEOMETRY=AS_XY&quot;) We can also write out this data to a shapefile format: write_sf(min_dist_sf, &quot;min_dists_sf.shp&quot;) "]
]
