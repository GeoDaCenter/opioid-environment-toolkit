[
["index.html", "Opioid Environment Toolkit Introduction 0.1 Software Basics 0.2 Author Team 1 Next Chapter 1.1 Author Team", " Opioid Environment Toolkit Created by : Center for Spatial Data Science `Last Updated : 2020-10-06 Introduction This toolkit provides an introduction to GIS and spatial analysis for opioid environment applications that will allow practitioners to support their communities with better data analytics and visualization services. We introduce basic spatial analytic functionalities using open source tools, mainly in R, using applied examples for visualizing, mapping, and understanding the opioid risk environment. This toolkit was developed for the JCOIN network by the team at the Center for Spatial Data Science at the University of Chicago. 0.1 Software Basics We assume a basic knowledge of R and coding languages for these toolkits. However, beginners can check out these resources for access to the basics. For most of the tutorials in this toolkit, you’ll need to have R and RStudio downloaded and installed on your system. You should be able to install packages, and have very basic familiarity with R following intro-level tutorials provided through installation guides. You can also refer to this R for Social Scientists tutorial developed by Data Carpentry for a refresher. You should also know how to find the address to a folder on your computer system. We will work with following libraries, so please be sure to install: sf tmap tidyverse tidycensus Note: You may find another library called sp if you google search spatial analysis in R. Note that sp and sf are two different packages. If you need to work between these two R spatial ecosystems, see this guide for a translation of sp to sf commands. 0.2 Author Team The tutorials in this toolkit were co-authored by Marynia Kolak, Moksha Menghaney, Qinyun Lin, and Angela Li. Our group is a part of the Policy and Practice Observational and Survey Research Core of the (JCOIN network)[https://heal.nih.gov/research/research-to-practice/jcoin], within the Methodology and Adsvanced Analytic Resource Center (MAARC). 1 Next Chapter 1.1 Author Team The tutorials in this toolkit were co-authored by Marynia Kolak, Moksha Menghaney, Qinyun Lin, and Angela Li. Our group is a part of the Policy and Practice Observational and Survey Research Core of the (JCOIN network)[https://heal.nih.gov/research/research-to-practice/jcoin], within the Methodology and Adsvanced Analytic Resource Center (MAARC). "],
["spatial-data-introduction.html", "Spatial Data Introduction What is spatial data? Vector data and shapefile Coordiante Reference System Contributors and Further Resources", " Spatial Data Introduction UNDER CONSTRUCTION What is spatial data? Spatial data refers to data that contain information about specific locations, and the information content of the data may change with location. In other words, “information” and “location” are two important elements in spatial data. In some occassions, spatial data may only include “location.” But without “location,” the data is no longer spatial anymore. For example, a spatial data that describes the resource distribution of Medications for Opioid Overuse Disorder (MOUDs) must contain location information of these MOUD resources, otherwise the data becomes a non-spatial list of those resources. For the purpose of this tutorial, we will only briefly introduce some important concept in spatial data. See Further Resources if you would like to learn more about these concepts. Vector data and shapefile Two common formats of spatial data are vector and raster data. For the purpose of this tutorial, we will focus on vector data that represents the world surface using points, lines, and polygons. Connecting points can generate lines, and connecting lines that crate an enclosed area can generate polygons. Vector data can come in a variety of different formats, among which the most commonly known is shapefile. The shapefile format consists of a collection of files with a common prefix, stored in the same directory. Three mandary files have filename extensions .shp, .shx, and .dbf. In many scenarios, these files are compressed into one file (such as .zip and .tar.gz). Coordiante Reference System As noted before, the most fundamental element of a spatial data is “location.” Coordinate reference system (CRS) tells your mapping software (such as R) what method should be used to flatten or project the Earth’s surface onto a 2-dimensional map. Because different CRS implies different ways of projections and generates substantially different visualizations, it is important to make sure the CRS accompanied with each spatial data are the same before implementing any spatial joining practices. In sf, you can use the function st_crs to check the CRS used in one data, and the function st_transform to project the data to a particular CRS. See this Interactive Tutorial that demonstrates these functions. Contributors and Further Resources Further resources See Chapter 2 Geographic data in R in Geocomputation with R for more info about Vector data, Raster data, and Coordiante Reference Systems. See this Software Carpentry workshop for more explanations to better understand coordinate reference systems. See this Interactive Tutorial that uses sf package to project spatial data in R. Contributors Qinyun Lin, University of Chicago is the principal author of the initial version of this tutorial. Helpful improvements provided by Marynia Kolak and Moksha Menghaney. Email: qinyunlin@uchicago for any issues/comments. "],
["buffer_analysis.html", "2 Buffer Analysis 2.1 Environment Setup 2.2 Simple Overlay Map 2.3 Spatial Transformation 2.4 Generate Buffers", " 2 Buffer Analysis 2.1 Environment Setup 2.1.1 Load libraries First, load the required libraries. library(sf) library(tidygeocoder) library(tmap) 2.1.2 Load Data We will use a the shapefile of spatially enabled resource data, generated from our previous tutorial. A copy of the shapefile can also be found here, but note that all four files are required (.dbf, .prj, .shp, and .shx) to consitute a shapfile. This shapefile includes methadone clinics in Chicago as our working example. Let’s take a look at the first few rows of the dataset. Our data includes addresses but not geographic coordinates. # Load Resource locations (shapefile) MetClinics &lt;- st_read(&quot;methadoneClinics.shp&quot;) ## Reading layer `methadoneClinics&#39; from data source `/Users/maryniakolak/code/opioid-environment-toolkit/methadoneClinics.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 27 features and 8 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -87.7349 ymin: 41.68698 xmax: -87.57673 ymax: 41.96475 ## CRS: 4326 head(MetClinics) ## Simple feature collection with 6 features and 8 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -87.67818 ymin: 41.89268 xmax: -87.63409 ymax: 41.96475 ## CRS: 4326 ## X Name Address City State Zip ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 ## 2 2 Sundace Methadone Treatment Center, LLC 4545 North Broadway St. Chicago IL 60640 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 ## 4 4 PDSSC - Chicago, Inc. 2260 N. Elston Ave. Chicago IL 60614 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 ## 6 6 Family Guidance Centers, Inc. 310 W. Chicago Ave. Chicago IL 60654 ## fullAdd geo_method geometry ## 1 4453 North Broadway st. Chicago IL 60640 osm POINT (-87.65566 41.96321) ## 2 4545 North Broadway St. Chicago IL 60640 osm POINT (-87.65694 41.96475) ## 3 3934 N. Lincoln Ave. Chicago IL 60613 census POINT (-87.67818 41.95331) ## 4 2260 N. Elston Ave. Chicago IL 60614 census POINT (-87.67407 41.92269) ## 5 609 N. Wells St. Chicago IL 60654 census POINT (-87.63409 41.89268) ## 6 310 W. Chicago Ave. Chicago IL 60654 census POINT (-87.63636 41.89657) Next, we load a shapefile of Chicago zip code areas. You can often find shapefiles (or KML, geojson spatial data formats) on city data portals for direct download. In our case, use the data provided here, though we will walk you through downloading boundaries directly through the Census via R in a later tutorial. # Load Zip Code locations (shapefile) Areas &lt;- st_read(&quot;data/chicago_zips.shp&quot;) ## Reading layer `chicago_zips&#39; from data source `/Users/maryniakolak/code/opioid-environment-toolkit/data/chicago_zips.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 85 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -88.06058 ymin: 41.58152 xmax: -87.52366 ymax: 42.06504 ## CRS: 4326 head(Areas) ## Simple feature collection with 6 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -88.06058 ymin: 41.73452 xmax: -87.58209 ymax: 42.04052 ## CRS: 4326 ## ZCTA5CE10 GEOID10 CLASSFP10 MTFCC10 FUNCSTAT10 ALAND10 AWATER10 INTPTLAT10 INTPTLON10 ## 1 60501 60501 B5 G6350 S 12532295 974360 +41.7802209 -087.8232440 ## 2 60007 60007 B5 G6350 S 36493383 917560 +42.0086000 -087.9973398 ## 3 60651 60651 B5 G6350 S 9052862 0 +41.9020934 -087.7408565 ## 4 60652 60652 B5 G6350 S 12987857 0 +41.7479319 -087.7147951 ## 5 60653 60653 B5 G6350 S 6041418 1696670 +41.8199645 -087.6059654 ## 6 60654 60654 B5 G6350 S 1464813 113471 +41.8918225 -087.6383036 ## geometry ## 1 MULTIPOLYGON (((-87.86289 4... ## 2 MULTIPOLYGON (((-88.06058 4... ## 3 MULTIPOLYGON (((-87.77559 4... ## 4 MULTIPOLYGON (((-87.74205 4... ## 5 MULTIPOLYGON (((-87.62623 4... ## 6 MULTIPOLYGON (((-87.64775 4... 2.2 Simple Overlay Map We can plot these quickly to ensure they are overlaying correctly. If they are, our coordinate systems are working correctly. ## 1st layer (gets plotted first) tm_shape(Areas) + tm_borders(alpha = 0.4) + ## 2nd layer (overlay) tm_shape(MetClinics) + tm_dots(size = 0.1, col=&quot;red&quot;) ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. 2.3 Spatial Transformation Check the Coordinate System/Projection for your data. st_crs(MetClinics) ## Coordinate Reference System: ## User input: 4326 ## wkt: ## GEOGCS[&quot;WGS 84&quot;, ## DATUM[&quot;WGS_1984&quot;, ## SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563, ## AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]] Are the coordinate systems for crime points and tracts the same? st_crs(Areas) ## Coordinate Reference System: ## User input: 4326 ## wkt: ## GEOGCS[&quot;WGS 84&quot;, ## DATUM[&quot;WGS_1984&quot;, ## SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563, ## AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]] 2.3.1 Transform CRS To calculate buffers, we will need to conver to a different CRS that preserves distance. Trying using a search engine like Google with search terms “CRS Illinois ft”, for example, to look for a code that provides what we need. After searching, we found EPSG:3435 that uses feet for a distance metric. We’ll use that! First, set a new CRS. CRS.new &lt;- st_crs(&quot;EPSG:3435&quot;) Next, transform both datasets to your new CRS. MetClinics.3435 &lt;- st_transform(MetClinics, CRS.new) Areas.3435 &lt;- st_transform(Areas, CRS.new) Check the CRS of both datasets again. If they are identical you’re ready to move onto the next step! 2.4 Generate Buffers # Create 2-mile buffers for each house point MetClinic_buffers &lt;- st_buffer(MetClinics.3435, 10560) Inspect the structure of the object you just created. Note that this is a new data object, represented as a polygon. Each buffer around each point is a separate entity. 2.4.1 Visualize buffers # Map in tmap tm_shape(Areas.3435) + tm_borders() + tm_shape(MetClinics.3435) + tm_dots(col = &quot;blue&quot;) + tm_shape(MetClinic_buffers) + tm_borders(col = &quot;red&quot;) ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. # Map Housing Buffers tm_shape(Areas) + tm_borders() + tm_shape(MetClinic_buffers) + tm_fill(col = &quot;blue&quot;, alpha = .4) + tm_borders(col = &quot;blue&quot;) + tm_shape(MetClinics.3435) + tm_dots(col = &quot;red&quot;) ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. 2.4.2 Merge buffers union.buffers &lt;- st_union(MetClinic_buffers) 2.4.3 Visualize union of buffers # Map Housing Buffers tm_shape(Areas) + tm_borders()+ tm_shape(union.buffers) + tm_fill(col = &quot;blue&quot;, alpha = .2) + tm_borders(col = &quot;blue&quot;) + tm_shape(MetClinics.3435) + tm_dots(col = &quot;red&quot;, size = 0.4) ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. "],
["centroid-access-tutorial.html", "Calculate Minimum Distance Access Metric Research Question Environment Setup Read in resource data Read in zip code data Calculate centroids of zip code boundaries Ensure that centroid and resource projections match Calculate distance from centroid to nearest resource Save as zip-code level dataset Contributors and Further Resources", " Calculate Minimum Distance Access Metric Research Question Spatial Access to specific resource is often considered a multidimensional concept where accessibility can be measured on affordability, availability, accommodation &amp; acceptability [include reference]. Distance to the nearest resource is a common metric used to capture the availability of a resource, and in this tutorial we demonstrate how to calculate a minimum distance value from a zip code centroid to a set of resources, such as locations of methadone clinics. Each zip code will be assigned a “minimum distance access metric” as a value that indicates access to resources from that zip code. Environment Setup To replicate the codes &amp; functions illustrated in this tutorial, you’ll need to have R and RStudio downloaded and installed on your system. This tutorial assumes some familiarity with the R programming language. Packages used We will use the following packages in this tutorial: sf: to manipulate spatial data tmap: to visualize and create maps units: to convert units within spatial data Required Inputs and Expected Outputs Our inputs will be: a CSV file with the locations of our resources (“chicago_methadone.csv”), and a zip code boundary file (“chicago_zips.shp”). We will calculate the minimum distance between the resources and the centroids of the zip codes, then save the results as a shapefile and as a CSV. Our final result will be a shapefile/CSV with the minimum distance value for each zip. Install and load the packages First, let’s install the relevant R packages: install.packages(&quot;sf&quot;) install.packages(&quot;tmap&quot;) install.packages(&quot;units&quot;) Then load the libraries for use. (The message you see about GEOS, GDAL, and PROJ refer to the software libraries that allow you to work with spatial data.) library(sf) library(tmap) library(units) ## Warning: package &#39;units&#39; was built under R version 3.6.2 ## udunits system database from /Library/Frameworks/R.framework/Versions/3.6/Resources/library/units/share/udunits Read in resource data We will use a CSV of methadone clinic addresses in Chicago as an example. This file represents point locations of clinics. methadone_clinics &lt;- read.csv(&quot;data/chicago_methadone.csv&quot;) Let’s take a look at the first few rows of the dataset. head(methadone_clinics) ## X Name Address City State Zip Longitude ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 -87.65594 ## 2 2 Sundace Methadone Treatment Center, LLC 4545 North Broadway St. Chicago IL 60640 -87.65703 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 -87.67844 ## 4 4 PDSSC - Chicago, Inc. 2260 N. Elston Ave. Chicago IL 60614 -87.67412 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 -87.63406 ## 6 6 Family Guidance Centers, Inc. 310 W. Chicago Ave. Chicago IL 60654 -87.63635 ## Latitude ## 1 41.96303 ## 2 41.96481 ## 3 41.95321 ## 4 41.92272 ## 5 41.89273 ## 6 41.89660 Our data has been geocoded, which means that it has latitude and longitude as columns associated with the address in the data. If you do not have this information, check the Geocoding and Visualizing Point Data to geocode your data. Next we convert the dataframe of addresses to a spatial data frame using the st_as_sf() function. The coords argument specifies which two columns are the X and Y for your data. We set the crs argument equal to 4326 because this data is in latitude and longitude (otherwise known as “unprojected”, which means it is not in feet or meters). meth_sf &lt;- st_as_sf(methadone_clinics, coords = c(&quot;Longitude&quot;, &quot;Latitude&quot;), crs = 4326) meth_sf ## Simple feature collection with 27 features and 6 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -87.73491 ymin: 41.68699 xmax: -87.57656 ymax: 41.96481 ## CRS: EPSG:4326 ## First 10 features: ## X Name Address City State Zip ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 ## 2 2 Sundace Methadone Treatment Center, LLC 4545 North Broadway St. Chicago IL 60640 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 ## 4 4 PDSSC - Chicago, Inc. 2260 N. Elston Ave. Chicago IL 60614 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 ## 6 6 Family Guidance Centers, Inc. 310 W. Chicago Ave. Chicago IL 60654 ## 7 7 A Rincon Family Services 3809 W. Grand Ave. Chicago IL 60651 ## 8 8 * 140 N. Ashland Ave. Chicago IL 60607 ## 9 9 Healthcare Alternative Systems, Inc./NEXA 210 N. Ashland Ave. Chicago IL 60607 ## 10 10 Specialized Assistance Services, NFP 2630 S. Wabash Ave. Chicago IL 60616 ## geometry ## 1 POINT (-87.65594 41.96303) ## 2 POINT (-87.65703 41.96481) ## 3 POINT (-87.67844 41.95321) ## 4 POINT (-87.67412 41.92272) ## 5 POINT (-87.63406 41.89273) ## 6 POINT (-87.63635 41.8966) ## 7 POINT (-87.72196 41.90436) ## 8 POINT (-87.66694 41.8847) ## 9 POINT (-87.667 41.88561) ## 10 POINT (-87.6253 41.84459) Note that this is a data frame, but that it has a final column called “geometry” that stores the spatial information. We can now plot the location of the methadone clinics with base R. We use the st_geometry() function to just get a single point map from the geographies. plot(st_geometry(meth_sf)) To make a slightly more interesting map, you can add an interactive basemap with tmap, using the tmap_mode function to change to “view” mode: tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(meth_sf) + tm_dots() ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. Read in zip code data If you have zip code boundary data from the Census (or other relevant site), you can load them into R with the read_sf command. Boundary data is commonly stored in the shapefile format, which has both a spatial (.shp, .shx, .prj) and a flat-file (.dbf) component. Shapefiles are made of four files (.shp, .shx, .prj, .dbf), all which needed to be in the same folder for the file to be read. chicago_zips &lt;- read_sf(&quot;data/chicago_zips.shp&quot;) Note: If you do not have the zip boundary data, please see the Get Geometry from [Downloading Community Contextual Data] (#contextual-data) for instructions on how to pull them directly from the Census website into R. If we take a look at the top of the data, we can see that the zip codes have data attached to them. The last column is the “geometry” column, which stores the spatial data. Additionally, there is a header with some spatial metadata about the data frame, including the type of geometry (“MULTIPOLYGON”), the bounding box (the square that surrounds your data), and the geographic projection (4326 is the shortcode reference for the string that starts “+proj=longlat +datum=WGS84 +no_defs”). Otherwise, this is just like your normal R tabular data frame. head(chicago_zips) ## Simple feature collection with 6 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -88.06058 ymin: 41.73452 xmax: -87.58209 ymax: 42.04052 ## CRS: 4326 ## # A tibble: 6 x 10 ## ZCTA5CE10 GEOID10 CLASSFP10 MTFCC10 FUNCSTAT10 ALAND10 AWATER10 INTPTLAT10 INTPTLON10 geometry ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;MULTIPOLYGON [°]&gt; ## 1 60501 60501 B5 G6350 S 12532295 974360 +41.78022… -087.8232… (((-87.86289 41.7544, -87.86247 … ## 2 60007 60007 B5 G6350 S 36493383 917560 +42.00860… -087.9973… (((-88.06058 41.9997, -88.06057 … ## 3 60651 60651 B5 G6350 S 9052862 0 +41.90209… -087.7408… (((-87.77559 41.90875, -87.77498… ## 4 60652 60652 B5 G6350 S 12987857 0 +41.74793… -087.7147… (((-87.74205 41.77113, -87.74182… ## 5 60653 60653 B5 G6350 S 6041418 1696670 +41.81996… -087.6059… (((-87.62623 41.81469, -87.6259 … ## 6 60654 60654 B5 G6350 S 1464813 113471 +41.89182… -087.6383… (((-87.64775 41.8964, -87.64764 … We can check that we pulled the zip code data properly by plotting it. Again, we use the st_geometry() function to just get the outline of the geometries. plot(st_geometry(chicago_zips)) We can add a second layer in blue with the access locations: plot(st_geometry(chicago_zips)) plot(st_geometry(meth_sf), col = &quot;blue&quot;, add = TRUE) With multiple layers, it can be easier to use tmap to plot: tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(chicago_zips) + tm_borders() + tm_shape(meth_sf) + tm_dots(col = &quot;blue&quot;, size = 0.2) Again, we can create an interactive map with tmap: tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(chicago_zips) + tm_borders() + tm_shape(meth_sf) + tm_dots() ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. Calculate centroids of zip code boundaries Now, we will calculate the centroids of the zip code boundaries. We will first need to project our data, which means change it from latitude and longitude to meaningful units, like ft or meters, so we can calculate distance properly. We’ll use the Illinois State Plane projection, with an EPSG code of 3435. Aside: To find the most appropriate projection for your data, do a Google Search for which projection works well - for state level data, each state has a State Plane projection with a specific code, known as the EPSG. I use epsg.io to check projections - here’s the New York State Plane page. Use the st_transform function to change the projection of the data. Notice how the values in geometry go from being relatively small (unprojected, lat/long) to very large (projected, in US feet). chicago_zips &lt;- st_transform(chicago_zips, 3435) chicago_zips ## Simple feature collection with 85 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 1058388 ymin: 1791133 xmax: 1205317 ymax: 1966816 ## CRS: EPSG:3435 ## # A tibble: 85 x 10 ## ZCTA5CE10 GEOID10 CLASSFP10 MTFCC10 FUNCSTAT10 ALAND10 AWATER10 INTPTLAT10 INTPTLON10 geometry ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;MULTIPOLYGON [US_survey_foot]&gt; ## 1 60501 60501 B5 G6350 S 12532295 974360 +41.78022… -087.8232… (((1112613 1853447, 1112726 185… ## 2 60007 60007 B5 G6350 S 36493383 917560 +42.00860… -087.9973… (((1058389 1942598, 1058390 194… ## 3 60651 60651 B5 G6350 S 9052862 0 +41.90209… -087.7408… (((1136069 1909833, 1136235 190… ## 4 60652 60652 B5 G6350 S 12987857 0 +41.74793… -087.7147… (((1145542 1859745, 1145607 185… ## 5 60653 60653 B5 G6350 S 6041418 1696670 +41.81996… -087.6059… (((1177007 1875855, 1177096 187… ## 6 60654 60654 B5 G6350 S 1464813 113471 +41.89182… -087.6383… (((1170904 1905583, 1170932 190… ## 7 60655 60655 B5 G6350 S 11408010 0 +41.69477… -087.7037… (((1146378 1830511, 1146444 183… ## 8 60656 60656 B5 G6350 S 8465226 0 +41.97428… -087.8271… (((1110359 1933204, 1110389 193… ## 9 60657 60657 B5 G6350 S 5888324 2025836 +41.94029… -087.6468… (((1162394 1923242, 1162526 192… ## 10 60659 60659 B5 G6350 S 5251086 2818 +41.99148… -087.7039… (((1148555 1941516, 1148713 194… ## # … with 75 more rows Then, we will calculate the centroids: chicago_centroids &lt;- st_centroid(chicago_zips) ## Warning in st_centroid.sf(chicago_zips): st_centroid assumes attributes are constant over geometries of x chicago_centroids ## Simple feature collection with 85 features and 9 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 1076716 ymin: 1802621 xmax: 1198093 ymax: 1956017 ## CRS: EPSG:3435 ## # A tibble: 85 x 10 ## ZCTA5CE10 GEOID10 CLASSFP10 MTFCC10 FUNCSTAT10 ALAND10 AWATER10 INTPTLAT10 INTPTLON10 geometry ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;POINT [US_survey_foot]&gt; ## 1 60501 60501 B5 G6350 S 12532295 974360 +41.7802209 -087.8232440 (1123181 1862885) ## 2 60007 60007 B5 G6350 S 36493383 917560 +42.0086000 -087.9973398 (1076716 1945541) ## 3 60651 60651 B5 G6350 S 9052862 0 +41.9020934 -087.7408565 (1145540 1907470) ## 4 60652 60652 B5 G6350 S 12987857 0 +41.7479319 -087.7147951 (1153039 1851344) ## 5 60653 60653 B5 G6350 S 6041418 1696670 +41.8199645 -087.6059654 (1182494 1877789) ## 6 60654 60654 B5 G6350 S 1464813 113471 +41.8918225 -087.6383036 (1173771 1904104) ## 7 60655 60655 B5 G6350 S 11408010 0 +41.6947762 -087.7037764 (1156187 1831997) ## 8 60656 60656 B5 G6350 S 8465226 0 +41.9742800 -087.8271283 (1121899 1933624) ## 9 60657 60657 B5 G6350 S 5888324 2025836 +41.9402931 -087.6468569 (1170365 1921589) ## 10 60659 60659 B5 G6350 S 5251086 2818 +41.9914885 -087.7039859 (1155320 1939992) ## # … with 75 more rows For each zip code, this will calculate the centroid, and the output will be a point dataset. Plot to double check that everything is ok. The st_geometry() function will once again just return the outline: plot(st_geometry(chicago_zips)) plot(st_geometry(chicago_centroids), add = TRUE, col = &quot;red&quot;) Once again, we can create an interactive map: tm_shape(chicago_zips) + tm_borders() + tm_shape(chicago_centroids) + tm_dots() ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(gm$shape.master_crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. ## Warning in `$.crs`(crs, &quot;proj4string&quot;): CRS uses proj4string, which is deprecated. Ensure that centroid and resource projections match If we immediately try to calculate the distance between the zip centroids and the locations of the resources using the st_distance function, we’ll get an error: st_distance(chicago_centroids, meth_sf, by_element = TRUE) Error in st_distance(chicago_centroids, meth_sf, by_element = TRUE) : st_crs(x) == st_crs(y) is not TRUE Why is there an error? Because the projection of the centroids and the resource locations don’t match up. Let’s project the resource locations so that they match the projection of the centroids. First, use the st_crs function to check that the coordinate reference system (or projection) is the same. They’re not, so we have to fix it. st_crs(chicago_centroids) ## Coordinate Reference System: ## User input: EPSG:3435 ## wkt: ## PROJCS[&quot;NAD83 / Illinois East (ftUS)&quot;, ## GEOGCS[&quot;NAD83&quot;, ## DATUM[&quot;North_American_Datum_1983&quot;, ## SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101, ## AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]], ## TOWGS84[0,0,0,0,0,0,0], ## AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]], ## PROJECTION[&quot;Transverse_Mercator&quot;], ## PARAMETER[&quot;latitude_of_origin&quot;,36.66666666666666], ## PARAMETER[&quot;central_meridian&quot;,-88.33333333333333], ## PARAMETER[&quot;scale_factor&quot;,0.999975], ## PARAMETER[&quot;false_easting&quot;,984250.0000000002], ## PARAMETER[&quot;false_northing&quot;,0], ## UNIT[&quot;US survey foot&quot;,0.3048006096012192, ## AUTHORITY[&quot;EPSG&quot;,&quot;9003&quot;]], ## AXIS[&quot;X&quot;,EAST], ## AXIS[&quot;Y&quot;,NORTH], ## AUTHORITY[&quot;EPSG&quot;,&quot;3435&quot;]] st_crs(meth_sf) ## Coordinate Reference System: ## User input: EPSG:4326 ## wkt: ## GEOGCS[&quot;WGS 84&quot;, ## DATUM[&quot;WGS_1984&quot;, ## SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563, ## AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]] We’ll take the CRS from the zip code centroids data, and use it as input to st_transform applied to the methadone clinics data. new_crs &lt;- st_crs(chicago_centroids) new_crs ## Coordinate Reference System: ## User input: EPSG:3435 ## wkt: ## PROJCS[&quot;NAD83 / Illinois East (ftUS)&quot;, ## GEOGCS[&quot;NAD83&quot;, ## DATUM[&quot;North_American_Datum_1983&quot;, ## SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101, ## AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]], ## TOWGS84[0,0,0,0,0,0,0], ## AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]], ## PROJECTION[&quot;Transverse_Mercator&quot;], ## PARAMETER[&quot;latitude_of_origin&quot;,36.66666666666666], ## PARAMETER[&quot;central_meridian&quot;,-88.33333333333333], ## PARAMETER[&quot;scale_factor&quot;,0.999975], ## PARAMETER[&quot;false_easting&quot;,984250.0000000002], ## PARAMETER[&quot;false_northing&quot;,0], ## UNIT[&quot;US survey foot&quot;,0.3048006096012192, ## AUTHORITY[&quot;EPSG&quot;,&quot;9003&quot;]], ## AXIS[&quot;X&quot;,EAST], ## AXIS[&quot;Y&quot;,NORTH], ## AUTHORITY[&quot;EPSG&quot;,&quot;3435&quot;]] meth_sf &lt;- st_transform(meth_sf, new_crs) If we check the CRS again, we now see that they match. Mismatched projections are a commonly made mistake in geospatial data processing. st_crs(chicago_centroids) ## Coordinate Reference System: ## User input: EPSG:3435 ## wkt: ## PROJCS[&quot;NAD83 / Illinois East (ftUS)&quot;, ## GEOGCS[&quot;NAD83&quot;, ## DATUM[&quot;North_American_Datum_1983&quot;, ## SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101, ## AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]], ## TOWGS84[0,0,0,0,0,0,0], ## AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]], ## PROJECTION[&quot;Transverse_Mercator&quot;], ## PARAMETER[&quot;latitude_of_origin&quot;,36.66666666666666], ## PARAMETER[&quot;central_meridian&quot;,-88.33333333333333], ## PARAMETER[&quot;scale_factor&quot;,0.999975], ## PARAMETER[&quot;false_easting&quot;,984250.0000000002], ## PARAMETER[&quot;false_northing&quot;,0], ## UNIT[&quot;US survey foot&quot;,0.3048006096012192, ## AUTHORITY[&quot;EPSG&quot;,&quot;9003&quot;]], ## AXIS[&quot;X&quot;,EAST], ## AXIS[&quot;Y&quot;,NORTH], ## AUTHORITY[&quot;EPSG&quot;,&quot;3435&quot;]] st_crs(meth_sf) ## Coordinate Reference System: ## User input: EPSG:3435 ## wkt: ## PROJCS[&quot;NAD83 / Illinois East (ftUS)&quot;, ## GEOGCS[&quot;NAD83&quot;, ## DATUM[&quot;North_American_Datum_1983&quot;, ## SPHEROID[&quot;GRS 1980&quot;,6378137,298.257222101, ## AUTHORITY[&quot;EPSG&quot;,&quot;7019&quot;]], ## TOWGS84[0,0,0,0,0,0,0], ## AUTHORITY[&quot;EPSG&quot;,&quot;6269&quot;]], ## PRIMEM[&quot;Greenwich&quot;,0, ## AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], ## UNIT[&quot;degree&quot;,0.0174532925199433, ## AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], ## AUTHORITY[&quot;EPSG&quot;,&quot;4269&quot;]], ## PROJECTION[&quot;Transverse_Mercator&quot;], ## PARAMETER[&quot;latitude_of_origin&quot;,36.66666666666666], ## PARAMETER[&quot;central_meridian&quot;,-88.33333333333333], ## PARAMETER[&quot;scale_factor&quot;,0.999975], ## PARAMETER[&quot;false_easting&quot;,984250.0000000002], ## PARAMETER[&quot;false_northing&quot;,0], ## UNIT[&quot;US survey foot&quot;,0.3048006096012192, ## AUTHORITY[&quot;EPSG&quot;,&quot;9003&quot;]], ## AXIS[&quot;X&quot;,EAST], ## AXIS[&quot;Y&quot;,NORTH], ## AUTHORITY[&quot;EPSG&quot;,&quot;3435&quot;]] Now we have the zip boundaries, the centroids of the zips, and the resource locations, as shown below. Next, we will calculate the distance to the nearest resource from each zip code centroid. plot(st_geometry(chicago_zips)) plot(st_geometry(chicago_centroids), col = &quot;red&quot;, add = TRUE) plot(st_geometry(meth_sf), col = &quot;blue&quot;, add = TRUE) Calculate distance from centroid to nearest resource First, we’ll identify the resource that is the closest to a zip centroid using the st_nearest_feature function. (It will return the index of the object that is nearest, so we will subset the resources by the index to get the nearest object.) nearest_clinic_indexes &lt;- st_nearest_feature(chicago_centroids, meth_sf) nearest_clinic &lt;- meth_sf[nearest_clinic_indexes,] nearest_clinic ## Simple feature collection with 85 features and 6 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 1147259 ymin: 1829334 xmax: 1190725 ymax: 1930492 ## CRS: EPSG:3435 ## First 10 features: ## X Name Address City State Zip ## 16 16 Katherine Boone Robinson Foundation 4100 W. Ogden Ave. Chicago IL 60623 ## 7 7 A Rincon Family Services 3809 W. Grand Ave. Chicago IL 60651 ## 7.1 7 A Rincon Family Services 3809 W. Grand Ave. Chicago IL 60651 ## 26 26 New Hope Community Service Center 2559 W. 79th St. Chicago IL 60652 ## 15 15 HRDI- Grand Boulevard Professional Counseling Center 340 E. 51st St. Chicago IL 60615 ## 5 5 Center for Addictive Problems, Inc. 609 N. Wells St. Chicago IL 60654 ## 26.1 26 New Hope Community Service Center 2559 W. 79th St. Chicago IL 60652 ## 7.2 7 A Rincon Family Services 3809 W. Grand Ave. Chicago IL 60651 ## 1 1 Chicago Treatment and Counseling Center, Inc. 4453 North Broadway st. Chicago IL 60640 ## 3 3 Soft Landing Interventions/DBA Symetria Recovery of Lakeview 3934 N. Lincoln Ave. Chicago IL 60613 ## geometry ## 16 POINT (1149563 1888684) ## 7 POINT (1150678 1908331) ## 7.1 POINT (1150678 1908331) ## 26 POINT (1160443 1852136) ## 15 POINT (1179400 1871296) ## 5 POINT (1174640 1904278) ## 26.1 POINT (1160443 1852136) ## 7.2 POINT (1150678 1908331) ## 1 POINT (1168480 1929847) ## 3 POINT (1162389 1926221) Then, we will calculate the distance between the nearest resource and the zip code centroid with the st_distance function. As shown above, make sure both of your datasets are projected, and in the same projection, before you run st_distance. min_dists &lt;- st_distance(chicago_centroids, nearest_clinic, by_element = TRUE) min_dists ## Units: [US_survey_foot] ## [1] 36899.7187 82794.9499 5210.0088 7446.1648 7192.4268 885.6142 20584.4913 38314.4490 8469.9351 15479.7403 ## [11] 9796.8522 4469.3071 33683.4980 24082.8186 24169.2397 45189.1792 31267.0776 10254.9649 10958.9389 13821.3363 ## [21] 49825.9391 32430.5115 36620.8289 22036.8980 13688.1510 22177.9153 63240.9022 4249.2975 3766.8707 5131.5781 ## [31] 5548.8181 8889.3859 3988.0292 5492.6866 7091.5663 6849.3251 3958.0982 45915.8759 32569.9607 44521.9752 ## [41] 58458.5465 5406.8794 5887.8101 2278.0342 6660.2051 5735.8249 304.8631 13604.9478 6942.3909 4993.9155 ## [51] 2841.4986 1679.0098 7651.3608 2529.0080 1667.5299 9406.8277 16622.9728 2042.7828 11421.7437 22480.9662 ## [61] 12104.7974 7613.8768 39613.5103 11724.1443 18463.5889 27529.9719 5232.8529 8774.4241 25352.7928 18954.0196 ## [71] 26416.7824 7550.1810 3455.8152 10997.6485 3097.7944 16812.6822 6171.7070 25247.7440 17149.4029 15235.8434 ## [81] 25019.9566 18574.8897 20179.9325 33065.4125 22450.6644 This is in US feet. To change to a more meaningful unit, such as miles, we can use the set_units() function: min_dists_mi &lt;- set_units(min_dists, &quot;mi&quot;) min_dists_mi ## Units: [mi] ## [1] 6.98859707 15.68089308 0.98674606 1.41026130 1.36220476 0.16773030 3.89858569 7.25653895 1.60415759 ## [10] 2.93177485 1.85546815 0.84646137 6.37946314 4.56114901 4.57751667 8.55857378 5.92180684 1.94223208 ## [19] 2.07556077 2.61768256 9.43674977 6.14215462 6.93577693 4.17366328 2.59245803 4.20037114 11.97746755 ## [28] 0.80479280 0.71342392 0.97189174 1.05091463 1.68359919 0.75531008 1.04028363 1.34310236 1.29722327 ## [37] 0.74964130 8.69620601 6.16856550 8.43220914 11.07171655 1.02403224 1.11511778 0.43144674 1.26140501 ## [46] 1.08633265 0.05773933 2.57669981 1.31484938 0.94581922 0.53816370 0.31799492 1.44912426 0.47897974 ## [55] 0.31582069 1.78159972 3.14829660 0.38689146 2.16321335 4.25776726 2.29257984 1.44202501 7.50257377 ## [64] 2.22048632 3.49689882 5.21402025 0.99107260 1.66182607 4.80167491 3.58978362 5.00318849 1.42996139 ## [73] 0.65451176 2.08289214 0.58670466 3.18422648 1.16888624 4.78177925 3.24799947 2.88558217 4.73863762 ## [82] 3.51797856 3.82196456 6.26240125 4.25202828 We then rejoin the minimum distances to the zip code data, by column binding min_dists_mi to the original chicago_zips data. min_dist_sf &lt;- cbind(chicago_zips, min_dists_mi) min_dist_sf ## Simple feature collection with 85 features and 10 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 1058388 ymin: 1791133 xmax: 1205317 ymax: 1966816 ## CRS: EPSG:3435 ## First 10 features: ## ZCTA5CE10 GEOID10 CLASSFP10 MTFCC10 FUNCSTAT10 ALAND10 AWATER10 INTPTLAT10 INTPTLON10 min_dists_mi ## 1 60501 60501 B5 G6350 S 12532295 974360 +41.7802209 -087.8232440 6.9885971 [mi] ## 2 60007 60007 B5 G6350 S 36493383 917560 +42.0086000 -087.9973398 15.6808931 [mi] ## 3 60651 60651 B5 G6350 S 9052862 0 +41.9020934 -087.7408565 0.9867461 [mi] ## 4 60652 60652 B5 G6350 S 12987857 0 +41.7479319 -087.7147951 1.4102613 [mi] ## 5 60653 60653 B5 G6350 S 6041418 1696670 +41.8199645 -087.6059654 1.3622048 [mi] ## 6 60654 60654 B5 G6350 S 1464813 113471 +41.8918225 -087.6383036 0.1677303 [mi] ## 7 60655 60655 B5 G6350 S 11408010 0 +41.6947762 -087.7037764 3.8985857 [mi] ## 8 60656 60656 B5 G6350 S 8465226 0 +41.9742800 -087.8271283 7.2565390 [mi] ## 9 60657 60657 B5 G6350 S 5888324 2025836 +41.9402931 -087.6468569 1.6041576 [mi] ## 10 60659 60659 B5 G6350 S 5251086 2818 +41.9914885 -087.7039859 2.9317749 [mi] ## geometry ## 1 MULTIPOLYGON (((1112613 185... ## 2 MULTIPOLYGON (((1058389 194... ## 3 MULTIPOLYGON (((1136069 190... ## 4 MULTIPOLYGON (((1145542 185... ## 5 MULTIPOLYGON (((1177007 187... ## 6 MULTIPOLYGON (((1170904 190... ## 7 MULTIPOLYGON (((1146378 183... ## 8 MULTIPOLYGON (((1110359 193... ## 9 MULTIPOLYGON (((1162394 192... ## 10 MULTIPOLYGON (((1148555 194... We can now visualize the zip-level access to methadone clinics using our new access metric, using the tmap package. tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(min_dist_sf) + tm_polygons(&quot;min_dists_mi&quot;, title = &quot;Minimum Distance (mi)&quot;) + tm_layout(main.title = &quot;Minimum Distance from Zip Centroid\\n to Methadone Clinic&quot;, main.title.position = &quot;center&quot;, main.title.size = 1) Access by zip code can also be combined with locations of resources: tm_shape(min_dist_sf) + tm_polygons(&quot;min_dists_mi&quot;, title = &quot;Minimum Distance (mi)&quot;) + tm_shape(meth_sf) + tm_dots(size = 0.2) + tm_layout(main.title = &quot;Minimum Distance from Zip Centroid\\n to Methadone Clinic&quot;, main.title.position = &quot;center&quot;, main.title.size = 1) Save as zip-code level dataset To save our final result to a CSV, use the layer_options = &quot;GEOMETRY=AS_XY&quot; command. Note that this option only works when you are working with point data. write_sf(min_dist_sf, &quot;min_dist.csv&quot;, layer_options = &quot;GEOMETRY=AS_XY&quot;) We can also write out this data to a shapefile format: write_sf(min_dist_sf, &quot;min_dists_sf.shp&quot;) Contributors and Further Resources Contributors Angela Li, University of Chicago is the principal author of the initial version of this tutorial. Helpful improvements provided by Moksha Menghaney and Marynia Kolak. Email: mmenghaney@uchicago.edu for any issues/comments. "]
]
